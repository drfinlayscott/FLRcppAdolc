// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include "../inst/include/FLRcppAdolc.h"

using namespace Rcpp;

// run
std::vector<double> run(FLFisheriesAdolc fisheries, fwdBiolAdolc biol, std::string srr_model_name, FLQuant srr_params, FLQuant srr_residuals, bool srr_residuals_mult, FLQuantAdolc7 f);
RcppExport SEXP FLRcppAdolc_run(SEXP fisheriesSEXP, SEXP biolSEXP, SEXP srr_model_nameSEXP, SEXP srr_paramsSEXP, SEXP srr_residualsSEXP, SEXP srr_residuals_multSEXP, SEXP fSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type fisheries(fisheriesSEXP );
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type biol(biolSEXP );
        Rcpp::traits::input_parameter< std::string >::type srr_model_name(srr_model_nameSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type srr_params(srr_paramsSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type srr_residuals(srr_residualsSEXP );
        Rcpp::traits::input_parameter< bool >::type srr_residuals_mult(srr_residuals_multSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type f(fSEXP );
        std::vector<double> __result = run(fisheries, biol, srr_model_name, srr_params, srr_residuals, srr_residuals_mult, f);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_project_timestep
Rcpp::List test_project_timestep(FLFisheriesAdolc fisheries, fwdBiolAdolc biol, std::string srr_model_name, FLQuant params, FLQuant residuals, bool residuals_mult, FLQuantAdolc7 f, const int timestep);
RcppExport SEXP FLRcppAdolc_test_project_timestep(SEXP fisheriesSEXP, SEXP biolSEXP, SEXP srr_model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP fSEXP, SEXP timestepSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type fisheries(fisheriesSEXP );
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type biol(biolSEXP );
        Rcpp::traits::input_parameter< std::string >::type srr_model_name(srr_model_nameSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type f(fSEXP );
        Rcpp::traits::input_parameter< const int >::type timestep(timestepSEXP );
        Rcpp::List __result = test_project_timestep(fisheries, biol, srr_model_name, params, residuals, residuals_mult, f, timestep);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_multiplier_assignment_operator
FLQuant test_FLQuant_FLQuant_multiplier_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_multiplier_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_multiplier_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_multiplier_assignment_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_multiplier_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_multiplier_assignment_operator
FLQuant test_FLQuant_double_multiplier_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_multiplier_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_multiplier_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_double_multiplier_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_multiplier_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_adouble_multiplier_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_multiplier_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_multiplier_operator
FLQuant test_FLQuant_FLQuant_multiplier_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_multiplier_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_multiplier_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_multiplier_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_multiplier_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_multiplier_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_multiplier_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_multiplier_operator
FLQuantAdolc test_FLQuant_FLQuantAdolc_multiplier_operator(FLQuant flq1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_multiplier_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuant_FLQuantAdolc_multiplier_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_multiplier_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_multiplier_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_multiplier_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_multiplier_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_multiplier_operator
FLQuant test_FLQuant_double_multiplier_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_multiplier_operator
FLQuant test_double_FLQuant_multiplier_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuant_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAdolc_multiplier_operator
FLQuantAdolc test_double_FLQuantAdolc_multiplier_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuantAdolc_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_double_FLQuantAdolc_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_multiplier_operator
FLQuantAdolc test_FLQuantAdolc_double_multiplier_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_multiplier_operator
FLQuantAdolc test_FLQuant_adouble_multiplier_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_adouble_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuant_adouble_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_multiplier_operator
FLQuantAdolc test_adouble_FLQuant_multiplier_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuant_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuant_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_multiplier_operator
FLQuantAdolc test_FLQuantAdolc_adouble_multiplier_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAdolc_multiplier_operator
FLQuantAdolc test_adouble_FLQuantAdolc_multiplier_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuantAdolc_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuantAdolc_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_division_assignment_operator
FLQuant test_FLQuant_FLQuant_division_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_division_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_division_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_division_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_division_assignment_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_division_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_division_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_division_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_division_assignment_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_division_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_division_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_division_assignment_operator
FLQuant test_FLQuant_double_division_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_division_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_division_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_division_assignment_operator
FLQuantAdolc test_FLQuantAdolc_double_division_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_division_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_division_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_division_assignment_operator
FLQuantAdolc test_FLQuantAdolc_adouble_division_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_division_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_division_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_division_operator
FLQuant test_FLQuant_FLQuant_division_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_division_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_division_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_division_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_division_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_division_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_division_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_division_operator
FLQuantAdolc test_FLQuant_FLQuantAdolc_division_operator(FLQuant flq1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_division_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuant_FLQuantAdolc_division_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_division_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_division_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_division_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_division_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_division_operator
FLQuant test_FLQuant_double_division_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_division_operator
FLQuant test_double_FLQuant_division_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuant_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAdolc_division_operator
FLQuantAdolc test_double_FLQuantAdolc_division_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuantAdolc_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_double_FLQuantAdolc_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_division_operator
FLQuantAdolc test_FLQuantAdolc_double_division_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_division_operator
FLQuantAdolc test_FLQuant_adouble_division_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_adouble_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuant_adouble_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_division_operator
FLQuantAdolc test_adouble_FLQuant_division_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuant_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuant_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_division_operator
FLQuantAdolc test_FLQuantAdolc_adouble_division_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAdolc_division_operator
FLQuantAdolc test_adouble_FLQuantAdolc_division_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuantAdolc_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuantAdolc_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_subtraction_assignment_operator
FLQuant test_FLQuant_FLQuant_subtraction_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_subtraction_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_subtraction_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_subtraction_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_subtraction_assignment_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_subtraction_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_subtraction_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_subtraction_assignment_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_subtraction_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_subtraction_assignment_operator
FLQuant test_FLQuant_double_subtraction_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_subtraction_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_subtraction_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_subtraction_assignment_operator
FLQuantAdolc test_FLQuantAdolc_double_subtraction_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_subtraction_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_subtraction_assignment_operator
FLQuantAdolc test_FLQuantAdolc_adouble_subtraction_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_subtraction_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_subtraction_operator
FLQuant test_FLQuant_FLQuant_subtraction_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_subtraction_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_subtraction_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_subtraction_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_subtraction_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_subtraction_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_subtraction_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_subtraction_operator
FLQuantAdolc test_FLQuant_FLQuantAdolc_subtraction_operator(FLQuant flq1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_subtraction_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuant_FLQuantAdolc_subtraction_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_subtraction_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_subtraction_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_subtraction_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_subtraction_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_subtraction_operator
FLQuant test_FLQuant_double_subtraction_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_subtraction_operator
FLQuant test_double_FLQuant_subtraction_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuant_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAdolc_subtraction_operator
FLQuantAdolc test_double_FLQuantAdolc_subtraction_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuantAdolc_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_double_FLQuantAdolc_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_subtraction_operator
FLQuantAdolc test_FLQuantAdolc_double_subtraction_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_subtraction_operator
FLQuantAdolc test_FLQuant_adouble_subtraction_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_adouble_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuant_adouble_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_subtraction_operator
FLQuantAdolc test_adouble_FLQuant_subtraction_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuant_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuant_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_subtraction_operator
FLQuantAdolc test_FLQuantAdolc_adouble_subtraction_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAdolc_subtraction_operator
FLQuantAdolc test_adouble_FLQuantAdolc_subtraction_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuantAdolc_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuantAdolc_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_addition_assignment_operator
FLQuant test_FLQuant_FLQuant_addition_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_addition_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_addition_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_addition_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_addition_assignment_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_addition_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_addition_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_addition_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_addition_assignment_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_addition_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_addition_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_addition_assignment_operator
FLQuant test_FLQuant_double_addition_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_addition_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_addition_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_addition_assignment_operator
FLQuantAdolc test_FLQuantAdolc_double_addition_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_addition_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_addition_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_addition_assignment_operator
FLQuantAdolc test_FLQuantAdolc_adouble_addition_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_addition_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_addition_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_addition_operator
FLQuant test_FLQuant_FLQuant_addition_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_addition_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_addition_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_addition_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_addition_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_addition_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_addition_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_addition_operator
FLQuantAdolc test_FLQuant_FLQuantAdolc_addition_operator(FLQuant flq1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_addition_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuant_FLQuantAdolc_addition_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_addition_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_addition_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_addition_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_addition_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_addition_operator
FLQuant test_FLQuant_double_addition_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_addition_operator
FLQuant test_double_FLQuant_addition_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuant_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAdolc_addition_operator
FLQuantAdolc test_double_FLQuantAdolc_addition_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuantAdolc_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_double_FLQuantAdolc_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_addition_operator
FLQuantAdolc test_FLQuantAdolc_double_addition_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_addition_operator
FLQuantAdolc test_FLQuant_adouble_addition_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_adouble_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuant_adouble_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_addition_operator
FLQuantAdolc test_adouble_FLQuant_addition_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuant_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuant_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_addition_operator
FLQuantAdolc test_FLQuantAdolc_adouble_addition_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAdolc_addition_operator
FLQuantAdolc test_adouble_FLQuantAdolc_addition_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuantAdolc_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuantAdolc_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_log
FLQuant test_FLQuant_log(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_log(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_log(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_log
FLQuantAdolc test_FLQuantAdolc_log(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_log(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_log(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_exp
FLQuant test_FLQuant_exp(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_exp(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_exp(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_exp
FLQuantAdolc test_FLQuantAdolc_exp(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_exp(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_exp(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_composite_arithmetic_operators
FLQuantAdolc test_composite_arithmetic_operators(FLQuantAdolc flqad, FLQuant flq, double value);
RcppExport SEXP FLRcppAdolc_test_composite_arithmetic_operators(SEXP flqadSEXP, SEXP flqSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad(flqadSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_composite_arithmetic_operators(flqad, flq, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_quant_sum
FLQuant test_FLQuant_quant_sum(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_quant_sum(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_quant_sum(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_quant_sum
FLQuantAdolc test_FLQuantAdolc_quant_sum(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_quant_sum(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_quant_sum(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_max_quant
FLQuant test_FLQuant_max_quant(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_max_quant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_max_quant
FLQuantAdolc test_FLQuantAdolc_max_quant(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_max_quant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_scale_by_max_quant
FLQuant test_FLQuant_scale_by_max_quant(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_scale_by_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_scale_by_max_quant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_scale_by_max_quant
FLQuantAdolc test_FLQuantAdolc_scale_by_max_quant(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_scale_by_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_scale_by_max_quant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_simple_FLCatch_sexp_constructor
int test_simple_FLCatch_sexp_constructor(SEXP flc_sexp);
RcppExport SEXP FLRcppAdolc_test_simple_FLCatch_sexp_constructor(SEXP flc_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flc_sexp(flc_sexpSEXP );
        int __result = test_simple_FLCatch_sexp_constructor(flc_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_sexp_constructor
FLCatch test_FLCatch_sexp_constructor(SEXP flc_sexp);
RcppExport SEXP FLRcppAdolc_test_FLCatch_sexp_constructor(SEXP flc_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flc_sexp(flc_sexpSEXP );
        FLCatch __result = test_FLCatch_sexp_constructor(flc_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_sexp_constructor
FLCatchAdolc test_FLCatchAdolc_sexp_constructor(SEXP flc_sexp);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_sexp_constructor(SEXP flc_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flc_sexp(flc_sexpSEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_sexp_constructor(flc_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_as_wrap
FLCatch test_FLCatch_as_wrap(FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_as_wrap(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP );
        FLCatch __result = test_FLCatch_as_wrap(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_as_wrap
FLCatchAdolc test_FLCatchAdolc_as_wrap(FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_as_wrap(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc(flcSEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_as_wrap(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_copy_constructor
FLCatch test_FLCatch_copy_constructor(FLCatch flc1);
RcppExport SEXP FLRcppAdolc_test_FLCatch_copy_constructor(SEXP flc1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP );
        FLCatch __result = test_FLCatch_copy_constructor(flc1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_copy_constructor
FLCatchAdolc test_FLCatchAdolc_copy_constructor(FLCatchAdolc flc1);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_copy_constructor(SEXP flc1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc1(flc1SEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_copy_constructor(flc1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_copy_constructor2
Rcpp::List test_FLCatch_copy_constructor2(FLCatch flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatch_copy_constructor2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatch_copy_constructor2(flc1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_copy_constructor2
Rcpp::List test_FLCatchAdolc_copy_constructor2(FLCatchAdolc flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_copy_constructor2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc1(flc1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatchAdolc_copy_constructor2(flc1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_assignment_operator
FLCatch test_FLCatch_assignment_operator(FLCatch flc1);
RcppExport SEXP FLRcppAdolc_test_FLCatch_assignment_operator(SEXP flc1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP );
        FLCatch __result = test_FLCatch_assignment_operator(flc1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_assignment_operator
FLCatchAdolc test_FLCatchAdolc_assignment_operator(FLCatchAdolc flc1);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_assignment_operator(SEXP flc1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc1(flc1SEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_assignment_operator(flc1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_assignment_operator2
Rcpp::List test_FLCatch_assignment_operator2(FLCatch flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatch_assignment_operator2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatch_assignment_operator2(flc1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_assignment_operator2
Rcpp::List test_FLCatchAdolc_assignment_operator2(FLCatchAdolc flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_assignment_operator2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc1(flc1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatchAdolc_assignment_operator2(flc1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_const_get_accessors
Rcpp::NumericVector test_FLCatch_const_get_accessors(const FLCatch flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatch_const_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLCatch_const_get_accessors(flc, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_const_get_accessors
Rcpp::NumericVector test_FLCatchAdolc_const_get_accessors(const FLCatchAdolc flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_const_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLCatchAdolc_const_get_accessors(flc, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_get_accessors
Rcpp::NumericVector test_FLCatch_get_accessors(FLCatch flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatch_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLCatch_get_accessors(flc, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_get_accessors
Rcpp::NumericVector test_FLCatchAdolc_get_accessors(FLCatchAdolc flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLCatchAdolc_get_accessors(flc, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_set_accessors
FLCatch test_FLCatch_set_accessors(FLCatch flc, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP FLRcppAdolc_test_FLCatch_set_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP );
        FLCatch __result = test_FLCatch_set_accessors(flc, quant, year, unit, season, area, iter, values);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_set_accessors
FLCatchAdolc test_FLCatchAdolc_set_accessors(FLCatchAdolc flc, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_set_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_set_accessors(flc, quant, year, unit, season, area, iter, values);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_landings
FLQuant test_FLCatch_landings(const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_landings(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLQuant __result = test_FLCatch_landings(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_landings
FLQuantAdolc test_FLCatchAdolc_landings(const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_landings(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLQuantAdolc __result = test_FLCatchAdolc_landings(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_discards
FLQuant test_FLCatch_discards(const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_discards(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLQuant __result = test_FLCatch_discards(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_discards
FLQuantAdolc test_FLCatchAdolc_discards(const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_discards(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLQuantAdolc __result = test_FLCatchAdolc_discards(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_catch_n
FLQuant test_FLCatch_catch_n(const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_catch_n(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLQuant __result = test_FLCatch_catch_n(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_catch_n
FLQuantAdolc test_FLCatchAdolc_catch_n(const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_catch_n(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLQuantAdolc __result = test_FLCatchAdolc_catch_n(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_catch_wt
FLQuant test_FLCatch_catch_wt(const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_catch_wt(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLQuant __result = test_FLCatch_catch_wt(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_catch_wt
FLQuantAdolc test_FLCatchAdolc_catch_wt(const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_catch_wt(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLQuantAdolc __result = test_FLCatchAdolc_catch_wt(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_catches
FLQuant test_FLCatch_catches(const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_catches(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLQuant __result = test_FLCatch_catches(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_catches
FLQuantAdolc test_FLCatchAdolc_catches(const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_catches(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLQuantAdolc __result = test_FLCatchAdolc_catches(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_discards_ratio
FLQuant test_FLCatch_discards_ratio(const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_discards_ratio(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLQuant __result = test_FLCatch_discards_ratio(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_discards_ratio
FLQuantAdolc test_FLCatchAdolc_discards_ratio(const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_discards_ratio(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLQuantAdolc __result = test_FLCatchAdolc_discards_ratio(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_landings_sel
FLQuant test_FLCatch_landings_sel(const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_landings_sel(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLQuant __result = test_FLCatch_landings_sel(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_landings_sel
FLQuantAdolc test_FLCatchAdolc_landings_sel(const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_landings_sel(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLQuantAdolc __result = test_FLCatchAdolc_landings_sel(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_discards_sel
FLQuant test_FLCatch_discards_sel(const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_discards_sel(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLQuant __result = test_FLCatch_discards_sel(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_discards_sel
FLQuantAdolc test_FLCatchAdolc_discards_sel(const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_discards_sel(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLQuantAdolc __result = test_FLCatchAdolc_discards_sel(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_as_wrap
FLCatches test_FLCatches_as_wrap(FLCatches flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatches_as_wrap(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        FLCatches __result = test_FLCatches_as_wrap(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_sexp_constructor
FLCatches test_FLCatches_sexp_constructor(SEXP flcs_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLCatches_sexp_constructor(SEXP flcs_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flcs_sexp1(flcs_sexp1SEXP );
        FLCatches __result = test_FLCatches_sexp_constructor(flcs_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_FLCatch_constructor
FLCatches test_FLCatches_FLCatch_constructor(FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatches_FLCatch_constructor(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP );
        FLCatches __result = test_FLCatches_FLCatch_constructor(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_copy_constructor
FLCatches test_FLCatches_copy_constructor(FLCatches flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatches_copy_constructor(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        FLCatches __result = test_FLCatches_copy_constructor(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_copy_constructor2
Rcpp::List test_FLCatches_copy_constructor2(FLCatches flcs1, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatches_copy_constructor2(SEXP flcs1SEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs1(flcs1SEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatches_copy_constructor2(flcs1, catches, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_assignment_operator
FLCatches test_FLCatches_assignment_operator(FLCatches flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatches_assignment_operator(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        FLCatches __result = test_FLCatches_assignment_operator(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_assignment_operator2
Rcpp::List test_FLCatches_assignment_operator2(FLCatches flcs1, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatches_assignment_operator2(SEXP flcs1SEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs1(flcs1SEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatches_assignment_operator2(flcs1, catches, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_function_operator
FLCatches test_FLCatches_function_operator(FLCatches flcs, FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatches_function_operator(SEXP flcsSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP );
        FLCatches __result = test_FLCatches_function_operator(flcs, flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_get_ncatches
int test_FLCatches_get_ncatches(SEXP flc_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLCatches_get_ncatches(SEXP flc_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flc_sexp1(flc_sexp1SEXP );
        int __result = test_FLCatches_get_ncatches(flc_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_const_get_single_index_accessor
FLCatch test_FLCatches_const_get_single_index_accessor(const FLCatches flcs, const int element);
RcppExport SEXP FLRcppAdolc_test_FLCatches_const_get_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatches >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLCatch __result = test_FLCatches_const_get_single_index_accessor(flcs, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_get_single_index_accessor
FLCatch test_FLCatches_get_single_index_accessor(FLCatches flcs, const int element);
RcppExport SEXP FLRcppAdolc_test_FLCatches_get_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLCatch __result = test_FLCatches_get_single_index_accessor(flcs, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_const_get_value_accessor
double test_FLCatches_const_get_value_accessor(const FLCatches flcs, const int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatches_const_get_value_accessor(SEXP flcsSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatches >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLCatches_const_get_value_accessor(flcs, catches, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_get_value_accessor
double test_FLCatches_get_value_accessor(FLCatches flcs, const int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatches_get_value_accessor(SEXP flcsSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLCatches_get_value_accessor(flcs, catches, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_set_single_index_accessor
FLCatches test_FLCatches_set_single_index_accessor(FLCatches flcs, const int element, const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatches_set_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLCatches __result = test_FLCatches_set_single_index_accessor(flcs, element, flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_set_value_accessor
FLCatches test_FLCatches_set_value_accessor(FLCatches flcs, const int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatches_set_value_accessor(SEXP flcsSEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLCatches __result = test_FLCatches_set_value_accessor(flcs, element, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_const_get_single_index_default_accessor
FLCatch test_FLCatches_const_get_single_index_default_accessor(const FLCatches flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatches_const_get_single_index_default_accessor(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatches >::type flcs(flcsSEXP );
        FLCatch __result = test_FLCatches_const_get_single_index_default_accessor(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_get_single_index_default_accessor
FLCatch test_FLCatches_get_single_index_default_accessor(FLCatches flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatches_get_single_index_default_accessor(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        FLCatch __result = test_FLCatches_get_single_index_default_accessor(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatches_set_single_index_default_accessor
FLCatches test_FLCatches_set_single_index_default_accessor(FLCatches flcs, const FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatches_set_single_index_default_accessor(SEXP flcsSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP );
        FLCatches __result = test_FLCatches_set_single_index_default_accessor(flcs, flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_as_wrap
FLCatchesAdolc test_FLCatchesAdolc_as_wrap(FLCatchesAdolc flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_as_wrap(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        FLCatchesAdolc __result = test_FLCatchesAdolc_as_wrap(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_sexp_constructor
FLCatchesAdolc test_FLCatchesAdolc_sexp_constructor(SEXP flcs_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_sexp_constructor(SEXP flcs_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flcs_sexp1(flcs_sexp1SEXP );
        FLCatchesAdolc __result = test_FLCatchesAdolc_sexp_constructor(flcs_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_FLCatchAdolc_constructor
FLCatchesAdolc test_FLCatchesAdolc_FLCatchAdolc_constructor(FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_FLCatchAdolc_constructor(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc(flcSEXP );
        FLCatchesAdolc __result = test_FLCatchesAdolc_FLCatchAdolc_constructor(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_copy_constructor
FLCatchesAdolc test_FLCatchesAdolc_copy_constructor(FLCatchesAdolc flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_copy_constructor(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        FLCatchesAdolc __result = test_FLCatchesAdolc_copy_constructor(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_copy_constructor2
Rcpp::List test_FLCatchesAdolc_copy_constructor2(FLCatchesAdolc flcs1, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_copy_constructor2(SEXP flcs1SEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs1(flcs1SEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatchesAdolc_copy_constructor2(flcs1, catches, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_assignment_operator
FLCatchesAdolc test_FLCatchesAdolc_assignment_operator(FLCatchesAdolc flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_assignment_operator(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        FLCatchesAdolc __result = test_FLCatchesAdolc_assignment_operator(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_assignment_operator2
Rcpp::List test_FLCatchesAdolc_assignment_operator2(FLCatchesAdolc flcs1, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_assignment_operator2(SEXP flcs1SEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs1(flcs1SEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatchesAdolc_assignment_operator2(flcs1, catches, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_function_operator
FLCatchesAdolc test_FLCatchesAdolc_function_operator(FLCatchesAdolc flcs, FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_function_operator(SEXP flcsSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc(flcSEXP );
        FLCatchesAdolc __result = test_FLCatchesAdolc_function_operator(flcs, flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_get_ncatches
int test_FLCatchesAdolc_get_ncatches(SEXP flc_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_get_ncatches(SEXP flc_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flc_sexp1(flc_sexp1SEXP );
        int __result = test_FLCatchesAdolc_get_ncatches(flc_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_const_get_single_index_accessor
FLCatchAdolc test_FLCatchesAdolc_const_get_single_index_accessor(const FLCatchesAdolc flcs, const int element);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_const_get_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchesAdolc >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLCatchAdolc __result = test_FLCatchesAdolc_const_get_single_index_accessor(flcs, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_get_single_index_accessor
FLCatchAdolc test_FLCatchesAdolc_get_single_index_accessor(FLCatchesAdolc flcs, const int element);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_get_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLCatchAdolc __result = test_FLCatchesAdolc_get_single_index_accessor(flcs, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_const_get_value_accessor
double test_FLCatchesAdolc_const_get_value_accessor(const FLCatchesAdolc flcs, const int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_const_get_value_accessor(SEXP flcsSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchesAdolc >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLCatchesAdolc_const_get_value_accessor(flcs, catches, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_get_value_accessor
double test_FLCatchesAdolc_get_value_accessor(FLCatchesAdolc flcs, const int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_get_value_accessor(SEXP flcsSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLCatchesAdolc_get_value_accessor(flcs, catches, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_set_single_index_accessor
FLCatchesAdolc test_FLCatchesAdolc_set_single_index_accessor(FLCatchesAdolc flcs, const int element, const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_set_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLCatchesAdolc __result = test_FLCatchesAdolc_set_single_index_accessor(flcs, element, flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_set_value_accessor
FLCatchesAdolc test_FLCatchesAdolc_set_value_accessor(FLCatchesAdolc flcs, const int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_set_value_accessor(SEXP flcsSEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLCatchesAdolc __result = test_FLCatchesAdolc_set_value_accessor(flcs, element, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_const_get_single_index_default_accessor
FLCatchAdolc test_FLCatchesAdolc_const_get_single_index_default_accessor(const FLCatchesAdolc flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_const_get_single_index_default_accessor(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLCatchesAdolc >::type flcs(flcsSEXP );
        FLCatchAdolc __result = test_FLCatchesAdolc_const_get_single_index_default_accessor(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_get_single_index_default_accessor
FLCatchAdolc test_FLCatchesAdolc_get_single_index_default_accessor(FLCatchesAdolc flcs);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_get_single_index_default_accessor(SEXP flcsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        FLCatchAdolc __result = test_FLCatchesAdolc_get_single_index_default_accessor(flcs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchesAdolc_set_single_index_default_accessor
FLCatchesAdolc test_FLCatchesAdolc_set_single_index_default_accessor(FLCatchesAdolc flcs, const FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchesAdolc_set_single_index_default_accessor(SEXP flcsSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchesAdolc >::type flcs(flcsSEXP );
        Rcpp::traits::input_parameter< const FLCatchAdolc >::type flc(flcSEXP );
        FLCatchesAdolc __result = test_FLCatchesAdolc_set_single_index_default_accessor(flcs, flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_empty_constructor
void test_FLFishery_empty_constructor();
RcppExport SEXP FLRcppAdolc_test_FLFishery_empty_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLFishery_empty_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_simple_FLFishery_sexp_constructor
int test_simple_FLFishery_sexp_constructor(SEXP flf_sexp);
RcppExport SEXP FLRcppAdolc_test_simple_FLFishery_sexp_constructor(SEXP flf_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flf_sexp(flf_sexpSEXP );
        int __result = test_simple_FLFishery_sexp_constructor(flf_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_sexp_constructor
FLFishery test_FLFishery_sexp_constructor(SEXP flf_sexp);
RcppExport SEXP FLRcppAdolc_test_FLFishery_sexp_constructor(SEXP flf_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flf_sexp(flf_sexpSEXP );
        FLFishery __result = test_FLFishery_sexp_constructor(flf_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_as_wrap
FLFishery test_FLFishery_as_wrap(FLFishery flf);
RcppExport SEXP FLRcppAdolc_test_FLFishery_as_wrap(SEXP flfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP );
        FLFishery __result = test_FLFishery_as_wrap(flf);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_copy_constructor
FLFishery test_FLFishery_copy_constructor(FLFishery flf1);
RcppExport SEXP FLRcppAdolc_test_FLFishery_copy_constructor(SEXP flf1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFishery >::type flf1(flf1SEXP );
        FLFishery __result = test_FLFishery_copy_constructor(flf1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_assignment_operator
FLFishery test_FLFishery_assignment_operator(FLFishery flf1);
RcppExport SEXP FLRcppAdolc_test_FLFishery_assignment_operator(SEXP flf1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFishery >::type flf1(flf1SEXP );
        FLFishery __result = test_FLFishery_assignment_operator(flf1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_const_catches_get_accessors
Rcpp::NumericVector test_FLFishery_const_catches_get_accessors(const FLFishery flf, int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLFishery_const_catches_get_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLFishery >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLFishery_const_catches_get_accessors(flf, catches, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_catches_get_accessors
Rcpp::NumericVector test_FLFishery_catches_get_accessors(FLFishery flf, int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLFishery_catches_get_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLFishery_catches_get_accessors(flf, catches, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_const_economics_get_accessors
Rcpp::NumericVector test_FLFishery_const_economics_get_accessors(const FLFishery flf, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLFishery_const_economics_get_accessors(SEXP flfSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLFishery >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLFishery_const_economics_get_accessors(flf, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_economics_get_accessors
Rcpp::NumericVector test_FLFishery_economics_get_accessors(FLFishery flf, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLFishery_economics_get_accessors(SEXP flfSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLFishery_economics_get_accessors(flf, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_set_accessors
FLFishery test_FLFishery_set_accessors(FLFishery flf, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLFishery_set_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLFishery __result = test_FLFishery_set_accessors(flf, catches, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_copy_constructor2
Rcpp::List test_FLFishery_copy_constructor2(FLFishery flf1, int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLFishery_copy_constructor2(SEXP flf1SEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFishery >::type flf1(flf1SEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLFishery_copy_constructor2(flf1, element, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFishery_assignment_operator2
Rcpp::List test_FLFishery_assignment_operator2(FLFishery flf1, int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLFishery_assignment_operator2(SEXP flf1SEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFishery >::type flf1(flf1SEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLFishery_assignment_operator2(flf1, element, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_empty_constructor
void test_FLFisheryAdolc_empty_constructor();
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_empty_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLFisheryAdolc_empty_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_simple_FLFisheryAdolc_sexp_constructor
int test_simple_FLFisheryAdolc_sexp_constructor(SEXP flf_sexp);
RcppExport SEXP FLRcppAdolc_test_simple_FLFisheryAdolc_sexp_constructor(SEXP flf_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flf_sexp(flf_sexpSEXP );
        int __result = test_simple_FLFisheryAdolc_sexp_constructor(flf_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_sexp_constructor
FLFisheryAdolc test_FLFisheryAdolc_sexp_constructor(SEXP flf_sexp);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_sexp_constructor(SEXP flf_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flf_sexp(flf_sexpSEXP );
        FLFisheryAdolc __result = test_FLFisheryAdolc_sexp_constructor(flf_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_as_wrap
FLFisheryAdolc test_FLFisheryAdolc_as_wrap(FLFisheryAdolc flf);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_as_wrap(SEXP flfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheryAdolc >::type flf(flfSEXP );
        FLFisheryAdolc __result = test_FLFisheryAdolc_as_wrap(flf);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_copy_constructor
FLFisheryAdolc test_FLFisheryAdolc_copy_constructor(FLFisheryAdolc flf1);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_copy_constructor(SEXP flf1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheryAdolc >::type flf1(flf1SEXP );
        FLFisheryAdolc __result = test_FLFisheryAdolc_copy_constructor(flf1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_assignment_operator
FLFisheryAdolc test_FLFisheryAdolc_assignment_operator(FLFisheryAdolc flf1);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_assignment_operator(SEXP flf1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheryAdolc >::type flf1(flf1SEXP );
        FLFisheryAdolc __result = test_FLFisheryAdolc_assignment_operator(flf1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_const_catches_get_accessors
Rcpp::NumericVector test_FLFisheryAdolc_const_catches_get_accessors(const FLFisheryAdolc flf, int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_const_catches_get_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLFisheryAdolc >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLFisheryAdolc_const_catches_get_accessors(flf, catches, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_catches_get_accessors
Rcpp::NumericVector test_FLFisheryAdolc_catches_get_accessors(FLFisheryAdolc flf, int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_catches_get_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheryAdolc >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLFisheryAdolc_catches_get_accessors(flf, catches, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_const_economics_get_accessors
Rcpp::NumericVector test_FLFisheryAdolc_const_economics_get_accessors(const FLFisheryAdolc flf, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_const_economics_get_accessors(SEXP flfSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLFisheryAdolc >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLFisheryAdolc_const_economics_get_accessors(flf, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_economics_get_accessors
Rcpp::NumericVector test_FLFisheryAdolc_economics_get_accessors(FLFisheryAdolc flf, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_economics_get_accessors(SEXP flfSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheryAdolc >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLFisheryAdolc_economics_get_accessors(flf, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_set_accessors
FLFisheryAdolc test_FLFisheryAdolc_set_accessors(FLFisheryAdolc flf, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_set_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheryAdolc >::type flf(flfSEXP );
        Rcpp::traits::input_parameter< int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLFisheryAdolc __result = test_FLFisheryAdolc_set_accessors(flf, catches, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_copy_constructor2
Rcpp::List test_FLFisheryAdolc_copy_constructor2(FLFisheryAdolc flf1, int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_copy_constructor2(SEXP flf1SEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheryAdolc >::type flf1(flf1SEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLFisheryAdolc_copy_constructor2(flf1, element, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheryAdolc_assignment_operator2
Rcpp::List test_FLFisheryAdolc_assignment_operator2(FLFisheryAdolc flf1, int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheryAdolc_assignment_operator2(SEXP flf1SEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheryAdolc >::type flf1(flf1SEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLFisheryAdolc_assignment_operator2(flf1, element, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_sexp_constructor
FLFisheries test_FLFisheries_sexp_constructor(SEXP flfs_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_sexp_constructor(SEXP flfs_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flfs_sexp1(flfs_sexp1SEXP );
        FLFisheries __result = test_FLFisheries_sexp_constructor(flfs_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_as_wrap
FLFisheries test_FLFisheries_as_wrap(FLFisheries flfs);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_as_wrap(SEXP flfsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        FLFisheries __result = test_FLFisheries_as_wrap(flfs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_get_nfisheries
int test_FLFisheries_get_nfisheries(FLFisheries flfs);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_get_nfisheries(SEXP flfsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        int __result = test_FLFisheries_get_nfisheries(flfs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_copy_constructor
FLFisheries test_FLFisheries_copy_constructor(FLFisheries flfs);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_copy_constructor(SEXP flfsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        FLFisheries __result = test_FLFisheries_copy_constructor(flfs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_copy_constructor2
Rcpp::List test_FLFisheries_copy_constructor2(FLFisheries flfs1, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_copy_constructor2(SEXP flfs1SEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs1(flfs1SEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLFisheries_copy_constructor2(flfs1, fishery, catches, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_assignment_operator
FLFisheries test_FLFisheries_assignment_operator(FLFisheries flfs);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_assignment_operator(SEXP flfsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        FLFisheries __result = test_FLFisheries_assignment_operator(flfs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_assignment_operator2
Rcpp::List test_FLFisheries_assignment_operator2(FLFisheries flfs1, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_assignment_operator2(SEXP flfs1SEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs1(flfs1SEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLFisheries_assignment_operator2(flfs1, fishery, catches, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_const_get_single
Rcpp::List test_FLFisheries_const_get_single(const FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_const_get_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLFisheries >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::List __result = test_FLFisheries_const_get_single(flfs, fishery, catches, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_get_single
Rcpp::List test_FLFisheries_get_single(FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_get_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::List __result = test_FLFisheries_get_single(flfs, fishery, catches, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_const_get_double
Rcpp::List test_FLFisheries_const_get_double(const FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_const_get_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLFisheries >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::List __result = test_FLFisheries_const_get_double(flfs, fishery, catches, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_get_double
Rcpp::List test_FLFisheries_get_double(FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_get_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::List __result = test_FLFisheries_get_double(flfs, fishery, catches, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_set_single
FLFisheries test_FLFisheries_set_single(FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_set_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLFisheries __result = test_FLFisheries_set_single(flfs, fishery, catches, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheries_set_double
FLFisheries test_FLFisheries_set_double(FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheries_set_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLFisheries __result = test_FLFisheries_set_double(flfs, fishery, catches, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_sexp_constructor
FLFisheriesAdolc test_FLFisheriesAdolc_sexp_constructor(SEXP flfs_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_sexp_constructor(SEXP flfs_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flfs_sexp1(flfs_sexp1SEXP );
        FLFisheriesAdolc __result = test_FLFisheriesAdolc_sexp_constructor(flfs_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_as_wrap
FLFisheriesAdolc test_FLFisheriesAdolc_as_wrap(FLFisheriesAdolc flfs);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_as_wrap(SEXP flfsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        FLFisheriesAdolc __result = test_FLFisheriesAdolc_as_wrap(flfs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_get_nfisheries
int test_FLFisheriesAdolc_get_nfisheries(FLFisheriesAdolc flfs);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_get_nfisheries(SEXP flfsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        int __result = test_FLFisheriesAdolc_get_nfisheries(flfs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_copy_constructor
FLFisheriesAdolc test_FLFisheriesAdolc_copy_constructor(FLFisheriesAdolc flfs);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_copy_constructor(SEXP flfsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        FLFisheriesAdolc __result = test_FLFisheriesAdolc_copy_constructor(flfs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_copy_constructor2
Rcpp::List test_FLFisheriesAdolc_copy_constructor2(FLFisheriesAdolc flfs1, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_copy_constructor2(SEXP flfs1SEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs1(flfs1SEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLFisheriesAdolc_copy_constructor2(flfs1, fishery, catches, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_assignment_operator
FLFisheriesAdolc test_FLFisheriesAdolc_assignment_operator(FLFisheriesAdolc flfs);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_assignment_operator(SEXP flfsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        FLFisheriesAdolc __result = test_FLFisheriesAdolc_assignment_operator(flfs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_assignment_operator2
Rcpp::List test_FLFisheriesAdolc_assignment_operator2(FLFisheriesAdolc flfs1, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_assignment_operator2(SEXP flfs1SEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs1(flfs1SEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLFisheriesAdolc_assignment_operator2(flfs1, fishery, catches, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_const_get_single
Rcpp::List test_FLFisheriesAdolc_const_get_single(const FLFisheriesAdolc flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_const_get_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLFisheriesAdolc >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::List __result = test_FLFisheriesAdolc_const_get_single(flfs, fishery, catches, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_get_single
Rcpp::List test_FLFisheriesAdolc_get_single(FLFisheriesAdolc flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_get_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::List __result = test_FLFisheriesAdolc_get_single(flfs, fishery, catches, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_const_get_double
Rcpp::List test_FLFisheriesAdolc_const_get_double(const FLFisheriesAdolc flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_const_get_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLFisheriesAdolc >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::List __result = test_FLFisheriesAdolc_const_get_double(flfs, fishery, catches, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_get_double
Rcpp::List test_FLFisheriesAdolc_get_double(FLFisheriesAdolc flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_get_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::List __result = test_FLFisheriesAdolc_get_double(flfs, fishery, catches, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_set_single
FLFisheriesAdolc test_FLFisheriesAdolc_set_single(FLFisheriesAdolc flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_set_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLFisheriesAdolc __result = test_FLFisheriesAdolc_set_single(flfs, fishery, catches, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLFisheriesAdolc_set_double
FLFisheriesAdolc test_FLFisheriesAdolc_set_double(FLFisheriesAdolc flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLFisheriesAdolc_set_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP );
        Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP );
        Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLFisheriesAdolc __result = test_FLFisheriesAdolc_set_double(flfs, fishery, catches, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_as_wrap
FLQuantAdolc test_FLQuantAdolc_as_wrap(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_as_wrap(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_as_wrap(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_basic_constructor
void test_FLQuantAdolc_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuantAdolc_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuantAdolc_sexp_constructor
FLQuantAdolc test_FLQuantAdolc_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp(flq_sexpSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_sexp_constructor(flq_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_dim_constructor
FLQuantAdolc test_FLQuantAdolc_dim_constructor(int nquant, int nyear, int nunit, int nseason, int narea, int niter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_dim_constructor(SEXP nquantSEXP, SEXP nyearSEXP, SEXP nunitSEXP, SEXP nseasonSEXP, SEXP nareaSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type nquant(nquantSEXP );
        Rcpp::traits::input_parameter< int >::type nyear(nyearSEXP );
        Rcpp::traits::input_parameter< int >::type nunit(nunitSEXP );
        Rcpp::traits::input_parameter< int >::type nseason(nseasonSEXP );
        Rcpp::traits::input_parameter< int >::type narea(nareaSEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_dim_constructor(nquant, nyear, nunit, nseason, narea, niter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_copy_constructor
FLQuantAdolc test_FLQuantAdolc_copy_constructor(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_copy_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_copy_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_copy_constructor2
Rcpp::List test_FLQuantAdolc_copy_constructor2(FLQuantAdolc flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_copy_constructor2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAdolc_copy_constructor2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_assignment_operator
FLQuantAdolc test_FLQuantAdolc_assignment_operator(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_assignment_operator(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_assignment_operator(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_assignment_operator2
Rcpp::List test_FLQuantAdolc_assignment_operator2(FLQuantAdolc flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_assignment_operator2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAdolc_assignment_operator2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_from_FLQuant_constructor
FLQuantAdolc test_FLQuantAdolc_from_FLQuant_constructor(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_from_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_from_FLQuant_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_units
std::string test_FLQuantAdolc_get_units(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_units(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        std::string __result = test_FLQuantAdolc_get_units(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_dim
Rcpp::IntegerVector test_FLQuantAdolc_get_dim(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_dim(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::IntegerVector __result = test_FLQuantAdolc_get_dim(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_dimnames
Rcpp::List test_FLQuantAdolc_get_dimnames(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_dimnames(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::List __result = test_FLQuantAdolc_get_dimnames(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_size
int test_FLQuantAdolc_get_size(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_size(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_size(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_nquant
int test_FLQuantAdolc_get_nquant(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_nquant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_nquant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_nyear
int test_FLQuantAdolc_get_nyear(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_nyear(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_nyear(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_nunit
int test_FLQuantAdolc_get_nunit(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_nunit(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_nunit(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_nseason
int test_FLQuantAdolc_get_nseason(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_nseason(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_nseason(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_narea
int test_FLQuantAdolc_get_narea(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_narea(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_narea(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_niter
int test_FLQuantAdolc_get_niter(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_niter(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_niter(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_data_element
int test_FLQuantAdolc_get_data_element(const FLQuantAdolc flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_data_element(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        int __result = test_FLQuantAdolc_get_data_element(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_const_single_index_accessor
double test_FLQuantAdolc_get_const_single_index_accessor(const FLQuantAdolc flq, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_const_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        double __result = test_FLQuantAdolc_get_const_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_single_index_accessor
double test_FLQuantAdolc_get_single_index_accessor(FLQuantAdolc flq, int element);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        double __result = test_FLQuantAdolc_get_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_set_single_index_accessor
FLQuantAdolc test_FLQuantAdolc_set_single_index_accessor(FLQuantAdolc flq, int element, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_set_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_set_single_index_accessor(flq, element, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_const_get_accessor
double test_FLQuantAdolc_const_get_accessor(const FLQuantAdolc flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_const_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc_const_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_accessor
double test_FLQuantAdolc_get_accessor(FLQuantAdolc flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_set_accessor
FLQuantAdolc test_FLQuantAdolc_set_accessor(FLQuantAdolc flq, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_set_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_set_accessor(flq, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_const_indices_accessor
double test_FLQuantAdolc_get_const_indices_accessor(const FLQuantAdolc flq, std::vector<unsigned int> indices);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_const_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        double __result = test_FLQuantAdolc_get_const_indices_accessor(flq, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_indices_accessor
double test_FLQuantAdolc_get_indices_accessor(FLQuantAdolc flq, std::vector<unsigned int> indices);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        double __result = test_FLQuantAdolc_get_indices_accessor(flq, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_set_indices_accessor
FLQuantAdolc test_FLQuantAdolc_set_indices_accessor(FLQuantAdolc flq, std::vector<unsigned int> indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_set_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_set_indices_accessor(flq, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_set_dimnames
FLQuantAdolc test_FLQuantAdolc_set_dimnames(FLQuantAdolc flq, Rcpp::List new_dimnames);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_set_dimnames(SEXP flqSEXP, SEXP new_dimnamesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type new_dimnames(new_dimnamesSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_set_dimnames(flq, new_dimnames);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_match_dims
int test_FLQuantAdolc_FLQuantAdolc_match_dims(FLQuantAdolc flq1, FLQuantAdolc flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq2(flq2SEXP );
        int __result = test_FLQuantAdolc_FLQuantAdolc_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_match_dims
int test_FLQuantAdolc_FLQuant_match_dims(FLQuantAdolc flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        int __result = test_FLQuantAdolc_FLQuant_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_match_dims
int test_FLQuant_FLQuantAdolc_match_dims(FLQuant flq1, FLQuantAdolc flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq2(flq2SEXP );
        int __result = test_FLQuant_FLQuantAdolc_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_as_wrap
FLQuant test_FLQuant_as_wrap(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_as_wrap(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_as_wrap(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_basic_constructor
void test_FLQuant_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuant_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuant_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuant_sexp_constructor
FLQuant test_FLQuant_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP FLRcppAdolc_test_FLQuant_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp(flq_sexpSEXP );
        FLQuant __result = test_FLQuant_sexp_constructor(flq_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_dim_constructor
FLQuant test_FLQuant_dim_constructor(int nquant, int nyear, int nunit, int nseason, int narea, int niter);
RcppExport SEXP FLRcppAdolc_test_FLQuant_dim_constructor(SEXP nquantSEXP, SEXP nyearSEXP, SEXP nunitSEXP, SEXP nseasonSEXP, SEXP nareaSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type nquant(nquantSEXP );
        Rcpp::traits::input_parameter< int >::type nyear(nyearSEXP );
        Rcpp::traits::input_parameter< int >::type nunit(nunitSEXP );
        Rcpp::traits::input_parameter< int >::type nseason(nseasonSEXP );
        Rcpp::traits::input_parameter< int >::type narea(nareaSEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        FLQuant __result = test_FLQuant_dim_constructor(nquant, nyear, nunit, nseason, narea, niter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_copy_constructor
FLQuant test_FLQuant_copy_constructor(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_copy_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_copy_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_copy_constructor2
Rcpp::List test_FLQuant_copy_constructor2(FLQuant flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_copy_constructor2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant_copy_constructor2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_assignment_operator
FLQuant test_FLQuant_assignment_operator(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_assignment_operator(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_assignment_operator(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_assignment_operator2
Rcpp::List test_FLQuant_assignment_operator2(FLQuant flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_assignment_operator2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant_assignment_operator2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_data
std::vector<double> test_FLQuant_get_data(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_data(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        std::vector<double> __result = test_FLQuant_get_data(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_units
std::string test_FLQuant_get_units(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_units(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        std::string __result = test_FLQuant_get_units(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_dim
Rcpp::IntegerVector test_FLQuant_get_dim(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_dim(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::IntegerVector __result = test_FLQuant_get_dim(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_dimnames
Rcpp::List test_FLQuant_get_dimnames(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_dimnames(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::List __result = test_FLQuant_get_dimnames(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_dimnames2
Rcpp::List test_FLQuant_get_dimnames2(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_dimnames2(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::List __result = test_FLQuant_get_dimnames2(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_size
int test_FLQuant_get_size(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_size(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_size(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nquant
int test_FLQuant_get_nquant(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_nquant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nquant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nyear
int test_FLQuant_get_nyear(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_nyear(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nyear(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nunit
int test_FLQuant_get_nunit(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_nunit(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nunit(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nseason
int test_FLQuant_get_nseason(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_nseason(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nseason(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_narea
int test_FLQuant_get_narea(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_narea(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_narea(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_niter
int test_FLQuant_get_niter(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_niter(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_niter(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_data_element
int test_FLQuant_get_data_element(const FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_data_element(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        int __result = test_FLQuant_get_data_element(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_const_single_index_accessor
double test_FLQuant_get_const_single_index_accessor(const FLQuant flq, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_const_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        double __result = test_FLQuant_get_const_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_single_index_accessor
double test_FLQuant_get_single_index_accessor(FLQuant flq, int element);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        double __result = test_FLQuant_get_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_single_index_accessor
FLQuant test_FLQuant_set_single_index_accessor(FLQuant flq, int element, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_set_single_index_accessor(flq, element, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_const_get_accessor
double test_FLQuant_const_get_accessor(const FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant_const_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuant_const_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_accessor
double test_FLQuant_get_accessor(FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuant_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_accessor
FLQuant test_FLQuant_set_accessor(FLQuant flq, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_set_accessor(flq, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_const_indices_accessor
double test_FLQuant_get_const_indices_accessor(const FLQuant flq, std::vector<unsigned int> indices);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_const_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        double __result = test_FLQuant_get_const_indices_accessor(flq, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_indices_accessor
double test_FLQuant_get_indices_accessor(FLQuant flq, std::vector<unsigned int> indices);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        double __result = test_FLQuant_get_indices_accessor(flq, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_indices_accessor
FLQuant test_FLQuant_set_indices_accessor(FLQuant flq, std::vector<unsigned int> indices, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_set_indices_accessor(flq, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_data
FLQuant test_FLQuant_set_data(FLQuant flq, std::vector<double> data_in);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_data(SEXP flqSEXP, SEXP data_inSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type data_in(data_inSEXP );
        FLQuant __result = test_FLQuant_set_data(flq, data_in);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_dimnames
FLQuant test_FLQuant_set_dimnames(FLQuant flq, Rcpp::List new_dimnames);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_dimnames(SEXP flqSEXP, SEXP new_dimnamesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type new_dimnames(new_dimnamesSEXP );
        FLQuant __result = test_FLQuant_set_dimnames(flq, new_dimnames);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_units
FLQuant test_FLQuant_set_units(FLQuant flq, std::string new_units);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_units(SEXP flqSEXP, SEXP new_unitsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::string >::type new_units(new_unitsSEXP );
        FLQuant __result = test_FLQuant_set_units(flq, new_units);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_subset
FLQuant test_FLQuant_subset(FLQuant flq, const int quant_min, const int quant_max, const int year_min, const int year_max, const int unit_min, const int unit_max, const int season_min, const int season_max, const int area_min, const int area_max, const int iter_min, const int iter_max);
RcppExport SEXP FLRcppAdolc_test_FLQuant_subset(SEXP flqSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP year_minSEXP, SEXP year_maxSEXP, SEXP unit_minSEXP, SEXP unit_maxSEXP, SEXP season_minSEXP, SEXP season_maxSEXP, SEXP area_minSEXP, SEXP area_maxSEXP, SEXP iter_minSEXP, SEXP iter_maxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type quant_min(quant_minSEXP );
        Rcpp::traits::input_parameter< const int >::type quant_max(quant_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type year_min(year_minSEXP );
        Rcpp::traits::input_parameter< const int >::type year_max(year_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type unit_min(unit_minSEXP );
        Rcpp::traits::input_parameter< const int >::type unit_max(unit_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type season_min(season_minSEXP );
        Rcpp::traits::input_parameter< const int >::type season_max(season_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type area_min(area_minSEXP );
        Rcpp::traits::input_parameter< const int >::type area_max(area_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type iter_min(iter_minSEXP );
        Rcpp::traits::input_parameter< const int >::type iter_max(iter_maxSEXP );
        FLQuant __result = test_FLQuant_subset(flq, quant_min, quant_max, year_min, year_max, unit_min, unit_max, season_min, season_max, area_min, area_max, iter_min, iter_max);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_match_dims
int test_FLQuant_FLQuant_match_dims(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        int __result = test_FLQuant_FLQuant_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_as_wrap
FLQuant7 test_FLQuant7_as_wrap(FLQuant7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_as_wrap(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant7 __result = test_FLQuant7_as_wrap(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_empty_wrap
FLQuant7 test_FLQuant7_empty_wrap();
RcppExport SEXP FLRcppAdolc_test_FLQuant7_empty_wrap() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        FLQuant7 __result = test_FLQuant7_empty_wrap();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_basic_constructor
void test_FLQuant7_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuant7_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuant7_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuant7_sexp_constructor
FLQuant7 test_FLQuant7_sexp_constructor(SEXP flq_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_sexp_constructor(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        FLQuant7 __result = test_FLQuant7_sexp_constructor(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_FLQuant_constructor
FLQuant7 test_FLQuant7_FLQuant_constructor(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_FLQuant_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_copy_constructor
FLQuant7 test_FLQuant7_copy_constructor(FLQuant7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_copy_constructor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant7 __result = test_FLQuant7_copy_constructor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_copy_constructor2
Rcpp::List test_FLQuant7_copy_constructor2(FLQuant7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_copy_constructor2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant7_copy_constructor2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_assignment_operator
FLQuant7 test_FLQuant7_assignment_operator(FLQuant7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_assignment_operator(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant7 __result = test_FLQuant7_assignment_operator(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_assignment_operator2
Rcpp::List test_FLQuant7_assignment_operator2(FLQuant7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_assignment_operator2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant7_assignment_operator2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_function_operator
FLQuant7 test_FLQuant7_function_operator(FLQuant7 flq7, FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_function_operator(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_function_operator(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_get_ndim7
int test_FLQuant7_get_ndim7(SEXP flq_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_get_ndim7(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        int __result = test_FLQuant7_get_ndim7(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_get_single_index_accessor
FLQuant test_FLQuant7_const_get_single_index_accessor(const FLQuant7 flq7, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_const_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuant __result = test_FLQuant7_const_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_get_single_index_accessor
FLQuant test_FLQuant7_get_single_index_accessor(FLQuant7 flq7, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuant __result = test_FLQuant7_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_set_single_index_accessor
FLQuant7 test_FLQuant7_set_single_index_accessor(FLQuant7 flq7, const int element, const FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_set_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_set_single_index_accessor(flq7, element, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_get_accessor
double test_FLQuant7_const_get_accessor(const FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_const_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_const_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_get_accessor
double test_FLQuant7_get_accessor(FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_set_accessor
FLQuant7 test_FLQuant7_set_accessor(FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_set_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuant7 __result = test_FLQuant7_set_accessor(flq7, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_default_dim7_get_accessor
FLQuant test_FLQuant7_const_default_dim7_get_accessor(const FLQuant7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_const_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        FLQuant __result = test_FLQuant7_const_default_dim7_get_accessor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_default_dim7_get_accessor
FLQuant test_FLQuant7_default_dim7_get_accessor(FLQuant7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant __result = test_FLQuant7_default_dim7_get_accessor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_default_dim7_set_accessor
FLQuant7 test_FLQuant7_default_dim7_set_accessor(FLQuant7 flq7, FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_default_dim7_set_accessor(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_default_dim7_set_accessor(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_default_dim7_get_accessor_multi
double test_FLQuant7_const_default_dim7_get_accessor_multi(const FLQuant7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_const_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_const_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_default_dim7_get_accessor_multi
double test_FLQuant7_default_dim7_get_accessor_multi(FLQuant7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_default_dim7_set_accessor_multi
FLQuant7 test_FLQuant7_default_dim7_set_accessor_multi(FLQuant7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_default_dim7_set_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuant7 __result = test_FLQuant7_default_dim7_set_accessor_multi(flq7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_as_wrap
FLQuantAdolc7 test_FLQuantAdolc7_as_wrap(FLQuantAdolc7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_as_wrap(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_as_wrap(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_empty_wrap
FLQuantAdolc7 test_FLQuantAdolc7_empty_wrap();
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_empty_wrap() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        FLQuantAdolc7 __result = test_FLQuantAdolc7_empty_wrap();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_basic_constructor
void test_FLQuantAdolc7_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuantAdolc7_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuantAdolc7_sexp_constructor
FLQuantAdolc7 test_FLQuantAdolc7_sexp_constructor(SEXP flq_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_sexp_constructor(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_sexp_constructor(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_FLQuant_constructor
FLQuantAdolc7 test_FLQuantAdolc7_FLQuant_constructor(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_FLQuant_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_copy_constructor
FLQuantAdolc7 test_FLQuantAdolc7_copy_constructor(FLQuantAdolc7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_copy_constructor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_copy_constructor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_copy_constructor2
Rcpp::List test_FLQuantAdolc7_copy_constructor2(FLQuantAdolc7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_copy_constructor2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAdolc7_copy_constructor2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_assignment_operator
FLQuantAdolc7 test_FLQuantAdolc7_assignment_operator(FLQuantAdolc7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_assignment_operator(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_assignment_operator(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_assignment_operator2
Rcpp::List test_FLQuantAdolc7_assignment_operator2(FLQuantAdolc7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_assignment_operator2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAdolc7_assignment_operator2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_function_operator
FLQuantAdolc7 test_FLQuantAdolc7_function_operator(FLQuantAdolc7 flq7, FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_function_operator(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_function_operator(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_get_ndim7
int test_FLQuantAdolc7_get_ndim7(SEXP flq_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_get_ndim7(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        int __result = test_FLQuantAdolc7_get_ndim7(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_const_get_single_index_accessor
FLQuantAdolc test_FLQuantAdolc7_const_get_single_index_accessor(const FLQuantAdolc7 flq7, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_const_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc7_const_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_get_single_index_accessor
FLQuantAdolc test_FLQuantAdolc7_get_single_index_accessor(FLQuantAdolc7 flq7, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc7_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_set_single_index_accessor
FLQuantAdolc7 test_FLQuantAdolc7_set_single_index_accessor(FLQuantAdolc7 flq7, const int element, const FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_set_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< const FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_set_single_index_accessor(flq7, element, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_const_get_accessor
double test_FLQuantAdolc7_const_get_accessor(const FLQuantAdolc7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_const_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc7_const_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_get_accessor
double test_FLQuantAdolc7_get_accessor(FLQuantAdolc7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc7_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_set_accessor
FLQuantAdolc7 test_FLQuantAdolc7_set_accessor(FLQuantAdolc7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_set_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_set_accessor(flq7, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_const_default_dim7_get_accessor
FLQuantAdolc test_FLQuantAdolc7_const_default_dim7_get_accessor(const FLQuantAdolc7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_const_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type flq7(flq7SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc7_const_default_dim7_get_accessor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_default_dim7_get_accessor
FLQuantAdolc test_FLQuantAdolc7_default_dim7_get_accessor(FLQuantAdolc7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc7_default_dim7_get_accessor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_default_dim7_set_accessor
FLQuantAdolc7 test_FLQuantAdolc7_default_dim7_set_accessor(FLQuantAdolc7 flq7, FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_default_dim7_set_accessor(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_default_dim7_set_accessor(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_const_default_dim7_get_accessor_multi
double test_FLQuantAdolc7_const_default_dim7_get_accessor_multi(const FLQuantAdolc7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_const_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc7_const_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_default_dim7_get_accessor_multi
double test_FLQuantAdolc7_default_dim7_get_accessor_multi(FLQuantAdolc7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc7_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_default_dim7_set_accessor_multi
FLQuantAdolc7 test_FLQuantAdolc7_default_dim7_set_accessor_multi(FLQuantAdolc7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_default_dim7_set_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_default_dim7_set_accessor_multi(flq7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQ_in_FLS
FLQuant test_FLQ_in_FLS(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQ_in_FLS(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQ_in_FLS(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_sexp_constructor
FLQuant test_FLStock_sexp_constructor(SEXP fls_sexp);
RcppExport SEXP FLRcppAdolc_test_FLStock_sexp_constructor(SEXP fls_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type fls_sexp(fls_sexpSEXP );
        FLQuant __result = test_FLStock_sexp_constructor(fls_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_wrap
FLStock test_FLStock_wrap(SEXP fls_sexp);
RcppExport SEXP FLRcppAdolc_test_FLStock_wrap(SEXP fls_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type fls_sexp(fls_sexpSEXP );
        FLStock __result = test_FLStock_wrap(fls_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_as
FLQuant test_FLStock_as(FLStock fls);
RcppExport SEXP FLRcppAdolc_test_FLStock_as(SEXP flsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls(flsSEXP );
        FLQuant __result = test_FLStock_as(fls);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_as_wrap
FLStock test_FLStock_as_wrap(FLStock fls);
RcppExport SEXP FLRcppAdolc_test_FLStock_as_wrap(SEXP flsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls(flsSEXP );
        FLStock __result = test_FLStock_as_wrap(fls);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_copy_constructor
Rcpp::List test_FLStock_copy_constructor(FLStock fls1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLStock_copy_constructor(SEXP fls1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls1(fls1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLStock_copy_constructor(fls1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_assignment_operator
Rcpp::List test_FLStock_assignment_operator(FLStock fls1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLStock_assignment_operator(SEXP fls1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls1(fls1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLStock_assignment_operator(fls1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_sexp_constructor
fwdBiol test_fwdBiol_sexp_constructor(SEXP flb_sexp);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_sexp_constructor(SEXP flb_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        fwdBiol __result = test_fwdBiol_sexp_constructor(flb_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_sexp_constructor
fwdBiolAdolc test_fwdBiolAdolc_sexp_constructor(SEXP flb_sexp);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_sexp_constructor(SEXP flb_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_sexp_constructor(flb_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_as_wrap
fwdBiol test_fwdBiol_as_wrap(fwdBiol fwdb);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_as_wrap(SEXP fwdbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb(fwdbSEXP );
        fwdBiol __result = test_fwdBiol_as_wrap(fwdb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_as_wrap
fwdBiolAdolc test_fwdBiolAdolc_as_wrap(fwdBiolAdolc fwdb);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_as_wrap(SEXP fwdbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb(fwdbSEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_as_wrap(fwdb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_fwdSR_constructor
Rcpp::List test_fwdBiol_fwdSR_constructor(SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_fwdSR_constructor(SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::List __result = test_fwdBiol_fwdSR_constructor(flb_sexp, model_name, params, residuals, residuals_mult);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_FLSR_bits_constructor
Rcpp::List test_fwdBiol_FLSR_bits_constructor(SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_FLSR_bits_constructor(SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::List __result = test_fwdBiol_FLSR_bits_constructor(flb_sexp, model_name, params, residuals, residuals_mult);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_fwdSRAdolc_constructor
Rcpp::List test_fwdBiolAdolc_fwdSRAdolc_constructor(SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_fwdSRAdolc_constructor(SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::List __result = test_fwdBiolAdolc_fwdSRAdolc_constructor(flb_sexp, model_name, params, residuals, residuals_mult);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_FLSR_bits_constructor
Rcpp::List test_fwdBiolAdolc_FLSR_bits_constructor(SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_FLSR_bits_constructor(SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::List __result = test_fwdBiolAdolc_FLSR_bits_constructor(flb_sexp, model_name, params, residuals, residuals_mult);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_copy_constructor
fwdBiol test_fwdBiol_copy_constructor(fwdBiol fwdb1);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_copy_constructor(SEXP fwdb1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP );
        fwdBiol __result = test_fwdBiol_copy_constructor(fwdb1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_copy_constructor
fwdBiolAdolc test_fwdBiolAdolc_copy_constructor(fwdBiolAdolc fwdb1);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_copy_constructor(SEXP fwdb1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb1(fwdb1SEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_copy_constructor(fwdb1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_copy_constructor2
Rcpp::List test_fwdBiol_copy_constructor2(fwdBiol fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_copy_constructor2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_fwdBiol_copy_constructor2(fwdb1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_copy_constructor2
Rcpp::List test_fwdBiolAdolc_copy_constructor2(fwdBiolAdolc fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_copy_constructor2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb1(fwdb1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_fwdBiolAdolc_copy_constructor2(fwdb1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_assignment_operator
fwdBiol test_fwdBiol_assignment_operator(fwdBiol fwdb1);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_assignment_operator(SEXP fwdb1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP );
        fwdBiol __result = test_fwdBiol_assignment_operator(fwdb1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_assignment_operator
fwdBiolAdolc test_fwdBiolAdolc_assignment_operator(fwdBiolAdolc fwdb1);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_assignment_operator(SEXP fwdb1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb1(fwdb1SEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_assignment_operator(fwdb1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_assignment_operator2
Rcpp::List test_fwdBiol_assignment_operator2(fwdBiol fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_assignment_operator2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_fwdBiol_assignment_operator2(fwdb1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_assignment_operator2
Rcpp::List test_fwdBiolAdolc_assignment_operator2(fwdBiolAdolc fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_assignment_operator2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb1(fwdb1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_fwdBiolAdolc_assignment_operator2(fwdb1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_const_get_accessors
Rcpp::NumericVector test_fwdBiol_const_get_accessors(const fwdBiol fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_const_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const fwdBiol >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_fwdBiol_const_get_accessors(fwdb, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_get_accessors
Rcpp::NumericVector test_fwdBiol_get_accessors(fwdBiol fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_fwdBiol_get_accessors(fwdb, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_const_get_accessors
Rcpp::NumericVector test_fwdBiolAdolc_const_get_accessors(const fwdBiolAdolc fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_const_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const fwdBiolAdolc >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_fwdBiolAdolc_const_get_accessors(fwdb, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_get_accessors
Rcpp::NumericVector test_fwdBiolAdolc_get_accessors(fwdBiolAdolc fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_fwdBiolAdolc_get_accessors(fwdb, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_set_accessors
fwdBiol test_fwdBiol_set_accessors(fwdBiol fwdb, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_set_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP );
        fwdBiol __result = test_fwdBiol_set_accessors(fwdb, quant, year, unit, season, area, iter, values);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_set_accessors
fwdBiolAdolc test_fwdBiolAdolc_set_accessors(fwdBiolAdolc fwdb, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_set_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_set_accessors(fwdb, quant, year, unit, season, area, iter, values);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdSR_empty_constructor
void test_fwdSR_empty_constructor();
RcppExport SEXP FLRcppAdolc_test_fwdSR_empty_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_fwdSR_empty_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_fwdSR_constructor_wrap
fwdSR test_fwdSR_constructor_wrap(const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP FLRcppAdolc_test_fwdSR_constructor_wrap(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        fwdSR __result = test_fwdSR_constructor_wrap(model_name, params, residuals, residuals_mult);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdSR_constructor_value
double test_fwdSR_constructor_value(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP FLRcppAdolc_test_fwdSR_constructor_value(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        double __result = test_fwdSR_constructor_value(model_name, params, residuals, residuals_mult);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdSR_get_nparams
int test_fwdSR_get_nparams(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP FLRcppAdolc_test_fwdSR_get_nparams(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        int __result = test_fwdSR_get_nparams(model_name, params, residuals, residuals_mult);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdSR_eval_simple
double test_fwdSR_eval_simple(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const double ssb);
RcppExport SEXP FLRcppAdolc_test_fwdSR_eval_simple(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP ssbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::traits::input_parameter< const double >::type ssb(ssbSEXP );
        double __result = test_fwdSR_eval_simple(model_name, params, residuals, residuals_mult, ssb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdSR_copy_constructor
Rcpp::List test_fwdSR_copy_constructor(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const double ssb);
RcppExport SEXP FLRcppAdolc_test_fwdSR_copy_constructor(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP ssbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::traits::input_parameter< const double >::type ssb(ssbSEXP );
        Rcpp::List __result = test_fwdSR_copy_constructor(model_name, params, residuals, residuals_mult, ssb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdSR_assignment_operator
Rcpp::List test_fwdSR_assignment_operator(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const double ssb);
RcppExport SEXP FLRcppAdolc_test_fwdSR_assignment_operator(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP ssbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::traits::input_parameter< const double >::type ssb(ssbSEXP );
        Rcpp::List __result = test_fwdSR_assignment_operator(model_name, params, residuals, residuals_mult, ssb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_operatingModel_empty_constructor
void test_operatingModel_empty_constructor();
RcppExport SEXP FLRcppAdolc_test_operatingModel_empty_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_operatingModel_empty_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_operatingModelAdolc_empty_constructor
void test_operatingModelAdolc_empty_constructor();
RcppExport SEXP FLRcppAdolc_test_operatingModelAdolc_empty_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_operatingModelAdolc_empty_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_operatingModel_full_constructor
operatingModelAdolc test_operatingModel_full_constructor(FLFisheriesAdolc flfs, SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const FLQuantAdolc7 f, const FLQuantAdolc7 f_spwn);
RcppExport SEXP FLRcppAdolc_test_operatingModel_full_constructor(SEXP flfsSEXP, SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP fSEXP, SEXP f_spwnSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type f(fSEXP );
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type f_spwn(f_spwnSEXP );
        operatingModelAdolc __result = test_operatingModel_full_constructor(flfs, flb_sexp, model_name, params, residuals, residuals_mult, f, f_spwn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_operatingModel_SSB_FLQ
FLQuant test_operatingModel_SSB_FLQ(FLFisheries flfs, SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const FLQuant7 f, const FLQuant7 f_spwn);
RcppExport SEXP FLRcppAdolc_test_operatingModel_SSB_FLQ(SEXP flfsSEXP, SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP fSEXP, SEXP f_spwnSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::traits::input_parameter< const FLQuant7 >::type f(fSEXP );
        Rcpp::traits::input_parameter< const FLQuant7 >::type f_spwn(f_spwnSEXP );
        FLQuant __result = test_operatingModel_SSB_FLQ(flfs, flb_sexp, model_name, params, residuals, residuals_mult, f, f_spwn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_operatingModelAdolc_SSB_FLQ
FLQuantAdolc test_operatingModelAdolc_SSB_FLQ(FLFisheriesAdolc flfs, SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const FLQuantAdolc7 f, const FLQuantAdolc7 f_spwn);
RcppExport SEXP FLRcppAdolc_test_operatingModelAdolc_SSB_FLQ(SEXP flfsSEXP, SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP fSEXP, SEXP f_spwnSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheriesAdolc >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type f(fSEXP );
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type f_spwn(f_spwnSEXP );
        FLQuantAdolc __result = test_operatingModelAdolc_SSB_FLQ(flfs, flb_sexp, model_name, params, residuals, residuals_mult, f, f_spwn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_operatingModel_SSB_iters
FLQuant test_operatingModel_SSB_iters(FLFisheries flfs, SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const FLQuant7 f, const FLQuant7 f_spwn, const int timestep, const int unit, const int area);
RcppExport SEXP FLRcppAdolc_test_operatingModel_SSB_iters(SEXP flfsSEXP, SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP fSEXP, SEXP f_spwnSEXP, SEXP timestepSEXP, SEXP unitSEXP, SEXP areaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::traits::input_parameter< const FLQuant7 >::type f(fSEXP );
        Rcpp::traits::input_parameter< const FLQuant7 >::type f_spwn(f_spwnSEXP );
        Rcpp::traits::input_parameter< const int >::type timestep(timestepSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        FLQuant __result = test_operatingModel_SSB_iters(flfs, flb_sexp, model_name, params, residuals, residuals_mult, f, f_spwn, timestep, unit, area);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_operatingModel_SSB_single_iter
double test_operatingModel_SSB_single_iter(FLFisheries flfs, SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const FLQuant7 f, const FLQuant7 f_spwn, const int timestep, const int unit, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_operatingModel_SSB_single_iter(SEXP flfsSEXP, SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP fSEXP, SEXP f_spwnSEXP, SEXP timestepSEXP, SEXP unitSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP );
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP );
        Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP );
        Rcpp::traits::input_parameter< const FLQuant7 >::type f(fSEXP );
        Rcpp::traits::input_parameter< const FLQuant7 >::type f_spwn(f_spwnSEXP );
        Rcpp::traits::input_parameter< const int >::type timestep(timestepSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_operatingModel_SSB_single_iter(flfs, flb_sexp, model_name, params, residuals, residuals_mult, f, f_spwn, timestep, unit, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_year_season_to_timestep_FLQuant_double
int test_year_season_to_timestep_FLQuant_double(FLQuant flq, const int year, const int season);
RcppExport SEXP FLRcppAdolc_test_year_season_to_timestep_FLQuant_double(SEXP flqSEXP, SEXP yearSEXP, SEXP seasonSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        int __result = test_year_season_to_timestep_FLQuant_double(flq, year, season);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_year_season_to_timestep_FLQuant_adouble
int test_year_season_to_timestep_FLQuant_adouble(FLQuantAdolc flqad, const int year, const int season);
RcppExport SEXP FLRcppAdolc_test_year_season_to_timestep_FLQuant_adouble(SEXP flqadSEXP, SEXP yearSEXP, SEXP seasonSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad(flqadSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        int __result = test_year_season_to_timestep_FLQuant_adouble(flqad, year, season);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_timestep_to_year_season_FLQuant_double
Rcpp::IntegerVector test_timestep_to_year_season_FLQuant_double(FLQuant flq, const int timestep);
RcppExport SEXP FLRcppAdolc_test_timestep_to_year_season_FLQuant_double(SEXP flqSEXP, SEXP timestepSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type timestep(timestepSEXP );
        Rcpp::IntegerVector __result = test_timestep_to_year_season_FLQuant_double(flq, timestep);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_timestep_to_year_season_FLQuant_adouble
Rcpp::IntegerVector test_timestep_to_year_season_FLQuant_adouble(FLQuantAdolc flqad, const int timestep);
RcppExport SEXP FLRcppAdolc_test_timestep_to_year_season_FLQuant_adouble(SEXP flqadSEXP, SEXP timestepSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad(flqadSEXP );
        Rcpp::traits::input_parameter< const int >::type timestep(timestepSEXP );
        Rcpp::IntegerVector __result = test_timestep_to_year_season_FLQuant_adouble(flqad, timestep);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_euclid_norm
double test_euclid_norm(std::vector<double> xvec);
RcppExport SEXP FLRcppAdolc_test_euclid_norm(SEXP xvecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type xvec(xvecSEXP );
        double __result = test_euclid_norm(xvec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_NR1
Rcpp::List test_NR1(const double initial_value, const int max_iters, const double max_limit, const double tolerance);
RcppExport SEXP FLRcppAdolc_test_NR1(SEXP initial_valueSEXP, SEXP max_itersSEXP, SEXP max_limitSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type initial_value(initial_valueSEXP );
        Rcpp::traits::input_parameter< const int >::type max_iters(max_itersSEXP );
        Rcpp::traits::input_parameter< const double >::type max_limit(max_limitSEXP );
        Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP );
        Rcpp::List __result = test_NR1(initial_value, max_iters, max_limit, tolerance);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_NR2
Rcpp::List test_NR2(std::vector<double> initial_value, const int max_iters, const double max_limit, const double tolerance);
RcppExport SEXP FLRcppAdolc_test_NR2(SEXP initial_valueSEXP, SEXP max_itersSEXP, SEXP max_limitSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type initial_value(initial_valueSEXP );
        Rcpp::traits::input_parameter< const int >::type max_iters(max_itersSEXP );
        Rcpp::traits::input_parameter< const double >::type max_limit(max_limitSEXP );
        Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP );
        Rcpp::List __result = test_NR2(initial_value, max_iters, max_limit, tolerance);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
