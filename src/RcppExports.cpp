// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include "../inst/include/FLRcppAdolc.h"

using namespace Rcpp;

// do_nothing_FLQuantAdolc
void do_nothing_FLQuantAdolc();
RcppExport SEXP FLRcppAdolc_do_nothing_FLQuantAdolc() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    do_nothing_FLQuantAdolc();
    return R_NilValue;
END_RCPP
}
// test_FLQuantAdolc_basic_constructor
void test_FLQuantAdolc_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_basic_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    test_FLQuantAdolc_basic_constructor();
    return R_NilValue;
END_RCPP
}
// test_FLQuantAdolc_sexp_constructor
void test_FLQuantAdolc_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    SEXP flq_sexp = Rcpp::as<SEXP >(flq_sexpSEXP);
    test_FLQuantAdolc_sexp_constructor(flq_sexp);
    return R_NilValue;
END_RCPP
}
// test_generic_FLQuant_base_wrap
FLQuant_base<adouble> test_generic_FLQuant_base_wrap(SEXP flq_sexp);
RcppExport SEXP FLRcppAdolc_test_generic_FLQuant_base_wrap(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    SEXP flq_sexp = Rcpp::as<SEXP >(flq_sexpSEXP);
    FLQuant_base<adouble> __result = test_generic_FLQuant_base_wrap(flq_sexp);
    return Rcpp::wrap(__result);
END_RCPP
}
// test_FLQuantAdolc_as_wrap
FLQuantAdolc test_FLQuantAdolc_as_wrap(FLQuantAdolc flqad);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_as_wrap(SEXP flqadSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    FLQuantAdolc flqad = Rcpp::as<FLQuantAdolc >(flqadSEXP);
    FLQuantAdolc __result = test_FLQuantAdolc_as_wrap(flqad);
    return Rcpp::wrap(__result);
END_RCPP
}
// test_FLQuantAdolc_FLQuant_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_multiplier_assignment_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    FLQuantAdolc flqad1 = Rcpp::as<FLQuantAdolc >(flqad1SEXP);
    FLQuant flq2 = Rcpp::as<FLQuant >(flq2SEXP);
    FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_multiplier_assignment_operator(flqad1, flq2);
    return Rcpp::wrap(__result);
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    FLQuantAdolc flqad1 = Rcpp::as<FLQuantAdolc >(flqad1SEXP);
    FLQuantAdolc flqad2 = Rcpp::as<FLQuantAdolc >(flqad2SEXP);
    FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator(flqad1, flqad2);
    return Rcpp::wrap(__result);
END_RCPP
}
// do_nothing_FLQuant
void do_nothing_FLQuant();
RcppExport SEXP FLRcppAdolc_do_nothing_FLQuant() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    do_nothing_FLQuant();
    return R_NilValue;
END_RCPP
}
// test_FLQuant_basic_constructor
void test_FLQuant_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuant_basic_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    test_FLQuant_basic_constructor();
    return R_NilValue;
END_RCPP
}
// test_FLQuant_sexp_constructor
void test_FLQuant_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP FLRcppAdolc_test_FLQuant_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    SEXP flq_sexp = Rcpp::as<SEXP >(flq_sexpSEXP);
    test_FLQuant_sexp_constructor(flq_sexp);
    return R_NilValue;
END_RCPP
}
// test_FLQuant_as_wrap
FLQuant test_FLQuant_as_wrap(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_as_wrap(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    FLQuant flq = Rcpp::as<FLQuant >(flqSEXP);
    FLQuant __result = test_FLQuant_as_wrap(flq);
    return Rcpp::wrap(__result);
END_RCPP
}
// test_FLQuant_FLQuant_multiplier_assignment_operator
FLQuant test_FLQuant_FLQuant_multiplier_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_multiplier_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    FLQuant flq1 = Rcpp::as<FLQuant >(flq1SEXP);
    FLQuant flq2 = Rcpp::as<FLQuant >(flq2SEXP);
    FLQuant __result = test_FLQuant_FLQuant_multiplier_assignment_operator(flq1, flq2);
    return Rcpp::wrap(__result);
END_RCPP
}
