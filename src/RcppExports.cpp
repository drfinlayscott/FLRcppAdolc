// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include "../inst/include/FLRcppAdolc.h"

using namespace Rcpp;

// test_FLQuant_FLQuant_multiplier_assignment_operator
FLQuant test_FLQuant_FLQuant_multiplier_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_multiplier_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_multiplier_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_multiplier_assignment_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_multiplier_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_multiplier_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_multiplier_assignment_operator
FLQuant test_FLQuant_double_multiplier_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_multiplier_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_multiplier_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_double_multiplier_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_multiplier_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_multiplier_assignment_operator
FLQuantAdolc test_FLQuantAdolc_adouble_multiplier_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_multiplier_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_multiplier_operator
FLQuant test_FLQuant_FLQuant_multiplier_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_multiplier_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_multiplier_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_multiplier_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_multiplier_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_multiplier_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_multiplier_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_multiplier_operator
FLQuantAdolc test_FLQuant_FLQuantAdolc_multiplier_operator(FLQuant flq1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_multiplier_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuant_FLQuantAdolc_multiplier_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_multiplier_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_multiplier_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_multiplier_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_multiplier_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_multiplier_operator
FLQuant test_FLQuant_double_multiplier_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_multiplier_operator
FLQuant test_double_FLQuant_multiplier_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuant_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAdolc_multiplier_operator
FLQuantAdolc test_double_FLQuantAdolc_multiplier_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuantAdolc_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_double_FLQuantAdolc_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_multiplier_operator
FLQuantAdolc test_FLQuantAdolc_double_multiplier_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_multiplier_operator
FLQuantAdolc test_FLQuant_adouble_multiplier_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_adouble_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuant_adouble_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_multiplier_operator
FLQuantAdolc test_adouble_FLQuant_multiplier_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuant_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuant_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_multiplier_operator
FLQuantAdolc test_FLQuantAdolc_adouble_multiplier_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAdolc_multiplier_operator
FLQuantAdolc test_adouble_FLQuantAdolc_multiplier_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuantAdolc_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuantAdolc_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_division_assignment_operator
FLQuant test_FLQuant_FLQuant_division_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_division_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_division_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_division_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_division_assignment_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_division_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_division_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_division_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_division_assignment_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_division_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_division_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_division_assignment_operator
FLQuant test_FLQuant_double_division_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_division_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_division_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_division_assignment_operator
FLQuantAdolc test_FLQuantAdolc_double_division_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_division_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_division_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_division_assignment_operator
FLQuantAdolc test_FLQuantAdolc_adouble_division_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_division_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_division_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_division_operator
FLQuant test_FLQuant_FLQuant_division_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_division_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_division_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_division_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_division_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_division_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_division_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_division_operator
FLQuantAdolc test_FLQuant_FLQuantAdolc_division_operator(FLQuant flq1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_division_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuant_FLQuantAdolc_division_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_division_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_division_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_division_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_division_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_division_operator
FLQuant test_FLQuant_double_division_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_division_operator
FLQuant test_double_FLQuant_division_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuant_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAdolc_division_operator
FLQuantAdolc test_double_FLQuantAdolc_division_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuantAdolc_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_double_FLQuantAdolc_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_division_operator
FLQuantAdolc test_FLQuantAdolc_double_division_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_division_operator
FLQuantAdolc test_FLQuant_adouble_division_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_adouble_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuant_adouble_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_division_operator
FLQuantAdolc test_adouble_FLQuant_division_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuant_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuant_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_division_operator
FLQuantAdolc test_FLQuantAdolc_adouble_division_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAdolc_division_operator
FLQuantAdolc test_adouble_FLQuantAdolc_division_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuantAdolc_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuantAdolc_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_subtraction_assignment_operator
FLQuant test_FLQuant_FLQuant_subtraction_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_subtraction_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_subtraction_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_subtraction_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_subtraction_assignment_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_subtraction_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_subtraction_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_subtraction_assignment_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_subtraction_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_subtraction_assignment_operator
FLQuant test_FLQuant_double_subtraction_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_subtraction_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_subtraction_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_subtraction_assignment_operator
FLQuantAdolc test_FLQuantAdolc_double_subtraction_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_subtraction_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_subtraction_assignment_operator
FLQuantAdolc test_FLQuantAdolc_adouble_subtraction_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_subtraction_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_subtraction_operator
FLQuant test_FLQuant_FLQuant_subtraction_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_subtraction_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_subtraction_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_subtraction_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_subtraction_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_subtraction_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_subtraction_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_subtraction_operator
FLQuantAdolc test_FLQuant_FLQuantAdolc_subtraction_operator(FLQuant flq1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_subtraction_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuant_FLQuantAdolc_subtraction_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_subtraction_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_subtraction_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_subtraction_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_subtraction_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_subtraction_operator
FLQuant test_FLQuant_double_subtraction_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_subtraction_operator
FLQuant test_double_FLQuant_subtraction_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuant_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAdolc_subtraction_operator
FLQuantAdolc test_double_FLQuantAdolc_subtraction_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuantAdolc_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_double_FLQuantAdolc_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_subtraction_operator
FLQuantAdolc test_FLQuantAdolc_double_subtraction_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_subtraction_operator
FLQuantAdolc test_FLQuant_adouble_subtraction_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_adouble_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuant_adouble_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_subtraction_operator
FLQuantAdolc test_adouble_FLQuant_subtraction_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuant_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuant_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_subtraction_operator
FLQuantAdolc test_FLQuantAdolc_adouble_subtraction_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAdolc_subtraction_operator
FLQuantAdolc test_adouble_FLQuantAdolc_subtraction_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuantAdolc_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuantAdolc_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_addition_assignment_operator
FLQuant test_FLQuant_FLQuant_addition_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_addition_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_addition_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_addition_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_addition_assignment_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_addition_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_addition_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_addition_assignment_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_addition_assignment_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_addition_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_addition_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_addition_assignment_operator
FLQuant test_FLQuant_double_addition_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_addition_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_addition_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_addition_assignment_operator
FLQuantAdolc test_FLQuantAdolc_double_addition_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_addition_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_addition_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_addition_assignment_operator
FLQuantAdolc test_FLQuantAdolc_adouble_addition_assignment_operator(FLQuantAdolc flqad1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_addition_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_addition_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_addition_operator
FLQuant test_FLQuant_FLQuant_addition_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_addition_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_addition_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_addition_operator
FLQuantAdolc test_FLQuantAdolc_FLQuant_addition_operator(FLQuantAdolc flqad1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_addition_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuant_addition_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_addition_operator
FLQuantAdolc test_FLQuant_FLQuantAdolc_addition_operator(FLQuant flq1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_addition_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuant_FLQuantAdolc_addition_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_addition_operator
FLQuantAdolc test_FLQuantAdolc_FLQuantAdolc_addition_operator(FLQuantAdolc flqad1, FLQuantAdolc flqad2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_addition_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad2(flqad2SEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_FLQuantAdolc_addition_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_addition_operator
FLQuant test_FLQuant_double_addition_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_double_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_addition_operator
FLQuant test_double_FLQuant_addition_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuant_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAdolc_addition_operator
FLQuantAdolc test_double_FLQuantAdolc_addition_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_double_FLQuantAdolc_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_double_FLQuantAdolc_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_double_addition_operator
FLQuantAdolc test_FLQuantAdolc_double_addition_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_double_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_double_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_addition_operator
FLQuantAdolc test_FLQuant_adouble_addition_operator(FLQuant flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_adouble_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuant_adouble_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_addition_operator
FLQuantAdolc test_adouble_FLQuant_addition_operator(double value, FLQuant flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuant_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuant_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_adouble_addition_operator
FLQuantAdolc test_FLQuantAdolc_adouble_addition_operator(FLQuantAdolc flq1, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_adouble_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_adouble_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAdolc_addition_operator
FLQuantAdolc test_adouble_FLQuantAdolc_addition_operator(double value, FLQuantAdolc flq1);
RcppExport SEXP FLRcppAdolc_test_adouble_FLQuantAdolc_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        FLQuantAdolc __result = test_adouble_FLQuantAdolc_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_log
FLQuant test_FLQuant_log(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_log(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_log(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_log
FLQuantAdolc test_FLQuantAdolc_log(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_log(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_log(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_exp
FLQuant test_FLQuant_exp(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_exp(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_exp(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_exp
FLQuantAdolc test_FLQuantAdolc_exp(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_exp(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_exp(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_composite_arithmetic_operators
FLQuantAdolc test_composite_arithmetic_operators(FLQuantAdolc flqad, FLQuant flq, double value);
RcppExport SEXP FLRcppAdolc_test_composite_arithmetic_operators(SEXP flqadSEXP, SEXP flqSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flqad(flqadSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_composite_arithmetic_operators(flqad, flq, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_simple_FLCatch_sexp_constructor
int test_simple_FLCatch_sexp_constructor(SEXP flc_sexp);
RcppExport SEXP FLRcppAdolc_test_simple_FLCatch_sexp_constructor(SEXP flc_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flc_sexp(flc_sexpSEXP );
        int __result = test_simple_FLCatch_sexp_constructor(flc_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_sexp_constructor
FLCatch test_FLCatch_sexp_constructor(SEXP flc_sexp);
RcppExport SEXP FLRcppAdolc_test_FLCatch_sexp_constructor(SEXP flc_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flc_sexp(flc_sexpSEXP );
        FLCatch __result = test_FLCatch_sexp_constructor(flc_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_sexp_constructor
FLCatchAdolc test_FLCatchAdolc_sexp_constructor(SEXP flc_sexp);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_sexp_constructor(SEXP flc_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flc_sexp(flc_sexpSEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_sexp_constructor(flc_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_as_wrap
FLCatch test_FLCatch_as_wrap(FLCatch flc);
RcppExport SEXP FLRcppAdolc_test_FLCatch_as_wrap(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP );
        FLCatch __result = test_FLCatch_as_wrap(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_as_wrap
FLCatchAdolc test_FLCatchAdolc_as_wrap(FLCatchAdolc flc);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_as_wrap(SEXP flcSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc(flcSEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_as_wrap(flc);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_copy_constructor
FLCatch test_FLCatch_copy_constructor(FLCatch flc1);
RcppExport SEXP FLRcppAdolc_test_FLCatch_copy_constructor(SEXP flc1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP );
        FLCatch __result = test_FLCatch_copy_constructor(flc1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_copy_constructor
FLCatchAdolc test_FLCatchAdolc_copy_constructor(FLCatchAdolc flc1);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_copy_constructor(SEXP flc1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc1(flc1SEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_copy_constructor(flc1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_copy_constructor2
Rcpp::List test_FLCatch_copy_constructor2(FLCatch flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatch_copy_constructor2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatch_copy_constructor2(flc1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_copy_constructor2
Rcpp::List test_FLCatchAdolc_copy_constructor2(FLCatchAdolc flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_copy_constructor2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc1(flc1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatchAdolc_copy_constructor2(flc1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_assignment_operator
FLCatch test_FLCatch_assignment_operator(FLCatch flc1);
RcppExport SEXP FLRcppAdolc_test_FLCatch_assignment_operator(SEXP flc1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP );
        FLCatch __result = test_FLCatch_assignment_operator(flc1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_assignment_operator
FLCatchAdolc test_FLCatchAdolc_assignment_operator(FLCatchAdolc flc1);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_assignment_operator(SEXP flc1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc1(flc1SEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_assignment_operator(flc1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_assignment_operator2
Rcpp::List test_FLCatch_assignment_operator2(FLCatch flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatch_assignment_operator2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatch_assignment_operator2(flc1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_assignment_operator2
Rcpp::List test_FLCatchAdolc_assignment_operator2(FLCatchAdolc flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_assignment_operator2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc1(flc1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLCatchAdolc_assignment_operator2(flc1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_get_accessors
Rcpp::NumericVector test_FLCatch_get_accessors(FLCatch flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatch_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLCatch_get_accessors(flc, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_get_accessors
Rcpp::NumericVector test_FLCatchAdolc_get_accessors(FLCatchAdolc flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_FLCatchAdolc_get_accessors(flc, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatch_set_accessors
FLCatch test_FLCatch_set_accessors(FLCatch flc, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP FLRcppAdolc_test_FLCatch_set_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP );
        FLCatch __result = test_FLCatch_set_accessors(flc, quant, year, unit, season, area, iter, values);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLCatchAdolc_set_accessors
FLCatchAdolc test_FLCatchAdolc_set_accessors(FLCatchAdolc flc, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP FLRcppAdolc_test_FLCatchAdolc_set_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLCatchAdolc >::type flc(flcSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP );
        FLCatchAdolc __result = test_FLCatchAdolc_set_accessors(flc, quant, year, unit, season, area, iter, values);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_as_wrap
FLQuantAdolc test_FLQuantAdolc_as_wrap(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_as_wrap(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_as_wrap(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_basic_constructor
void test_FLQuantAdolc_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuantAdolc_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuantAdolc_sexp_constructor
FLQuantAdolc test_FLQuantAdolc_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp(flq_sexpSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_sexp_constructor(flq_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_dim_constructor
FLQuantAdolc test_FLQuantAdolc_dim_constructor(int nquant, int nyear, int nunit, int nseason, int narea, int niter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_dim_constructor(SEXP nquantSEXP, SEXP nyearSEXP, SEXP nunitSEXP, SEXP nseasonSEXP, SEXP nareaSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type nquant(nquantSEXP );
        Rcpp::traits::input_parameter< int >::type nyear(nyearSEXP );
        Rcpp::traits::input_parameter< int >::type nunit(nunitSEXP );
        Rcpp::traits::input_parameter< int >::type nseason(nseasonSEXP );
        Rcpp::traits::input_parameter< int >::type narea(nareaSEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_dim_constructor(nquant, nyear, nunit, nseason, narea, niter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_copy_constructor
FLQuantAdolc test_FLQuantAdolc_copy_constructor(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_copy_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_copy_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_copy_constructor2
Rcpp::List test_FLQuantAdolc_copy_constructor2(FLQuantAdolc flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_copy_constructor2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAdolc_copy_constructor2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_assignment_operator
FLQuantAdolc test_FLQuantAdolc_assignment_operator(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_assignment_operator(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_assignment_operator(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_assignment_operator2
Rcpp::List test_FLQuantAdolc_assignment_operator2(FLQuantAdolc flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_assignment_operator2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAdolc_assignment_operator2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_from_FLQuant_constructor
FLQuantAdolc test_FLQuantAdolc_from_FLQuant_constructor(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_from_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_from_FLQuant_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_units
std::string test_FLQuantAdolc_get_units(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_units(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        std::string __result = test_FLQuantAdolc_get_units(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_dim
Rcpp::IntegerVector test_FLQuantAdolc_get_dim(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_dim(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::IntegerVector __result = test_FLQuantAdolc_get_dim(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_dimnames
Rcpp::List test_FLQuantAdolc_get_dimnames(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_dimnames(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::List __result = test_FLQuantAdolc_get_dimnames(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_size
int test_FLQuantAdolc_get_size(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_size(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_size(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_nquant
int test_FLQuantAdolc_get_nquant(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_nquant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_nquant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_nyear
int test_FLQuantAdolc_get_nyear(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_nyear(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_nyear(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_nunit
int test_FLQuantAdolc_get_nunit(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_nunit(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_nunit(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_nseason
int test_FLQuantAdolc_get_nseason(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_nseason(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_nseason(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_narea
int test_FLQuantAdolc_get_narea(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_narea(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_narea(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_niter
int test_FLQuantAdolc_get_niter(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_niter(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        int __result = test_FLQuantAdolc_get_niter(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_data_element
int test_FLQuantAdolc_get_data_element(const FLQuantAdolc flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_data_element(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        int __result = test_FLQuantAdolc_get_data_element(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_const_single_index_accessor
double test_FLQuantAdolc_get_const_single_index_accessor(const FLQuantAdolc flq, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_const_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        double __result = test_FLQuantAdolc_get_const_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_single_index_accessor
double test_FLQuantAdolc_get_single_index_accessor(FLQuantAdolc flq, int element);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        double __result = test_FLQuantAdolc_get_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_set_single_index_accessor
FLQuantAdolc test_FLQuantAdolc_set_single_index_accessor(FLQuantAdolc flq, int element, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_set_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_set_single_index_accessor(flq, element, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_const_get_accessor
double test_FLQuantAdolc_const_get_accessor(const FLQuantAdolc flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_const_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc_const_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_get_accessor
double test_FLQuantAdolc_get_accessor(FLQuantAdolc flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_set_accessor
FLQuantAdolc test_FLQuantAdolc_set_accessor(FLQuantAdolc flq, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_set_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_set_accessor(flq, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_set_dimnames
FLQuantAdolc test_FLQuantAdolc_set_dimnames(FLQuantAdolc flq, Rcpp::List new_dimnames);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_set_dimnames(SEXP flqSEXP, SEXP new_dimnamesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type new_dimnames(new_dimnamesSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc_set_dimnames(flq, new_dimnames);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuantAdolc_match_dims
int test_FLQuantAdolc_FLQuantAdolc_match_dims(FLQuantAdolc flq1, FLQuantAdolc flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuantAdolc_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq2(flq2SEXP );
        int __result = test_FLQuantAdolc_FLQuantAdolc_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc_FLQuant_match_dims
int test_FLQuantAdolc_FLQuant_match_dims(FLQuantAdolc flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc_FLQuant_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        int __result = test_FLQuantAdolc_FLQuant_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAdolc_match_dims
int test_FLQuant_FLQuantAdolc_match_dims(FLQuant flq1, FLQuantAdolc flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuantAdolc_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq2(flq2SEXP );
        int __result = test_FLQuant_FLQuantAdolc_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_as_wrap
FLQuant test_FLQuant_as_wrap(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_as_wrap(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_as_wrap(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_basic_constructor
void test_FLQuant_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuant_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuant_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuant_sexp_constructor
FLQuant test_FLQuant_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP FLRcppAdolc_test_FLQuant_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp(flq_sexpSEXP );
        FLQuant __result = test_FLQuant_sexp_constructor(flq_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_dim_constructor
FLQuant test_FLQuant_dim_constructor(int nquant, int nyear, int nunit, int nseason, int narea, int niter);
RcppExport SEXP FLRcppAdolc_test_FLQuant_dim_constructor(SEXP nquantSEXP, SEXP nyearSEXP, SEXP nunitSEXP, SEXP nseasonSEXP, SEXP nareaSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type nquant(nquantSEXP );
        Rcpp::traits::input_parameter< int >::type nyear(nyearSEXP );
        Rcpp::traits::input_parameter< int >::type nunit(nunitSEXP );
        Rcpp::traits::input_parameter< int >::type nseason(nseasonSEXP );
        Rcpp::traits::input_parameter< int >::type narea(nareaSEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        FLQuant __result = test_FLQuant_dim_constructor(nquant, nyear, nunit, nseason, narea, niter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_copy_constructor
FLQuant test_FLQuant_copy_constructor(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_copy_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_copy_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_copy_constructor2
Rcpp::List test_FLQuant_copy_constructor2(FLQuant flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_copy_constructor2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant_copy_constructor2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_assignment_operator
FLQuant test_FLQuant_assignment_operator(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_assignment_operator(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_assignment_operator(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_assignment_operator2
Rcpp::List test_FLQuant_assignment_operator2(FLQuant flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_assignment_operator2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant_assignment_operator2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_data
std::vector<double> test_FLQuant_get_data(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_data(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        std::vector<double> __result = test_FLQuant_get_data(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_units
std::string test_FLQuant_get_units(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_units(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        std::string __result = test_FLQuant_get_units(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_dim
Rcpp::IntegerVector test_FLQuant_get_dim(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_dim(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::IntegerVector __result = test_FLQuant_get_dim(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_dimnames
Rcpp::List test_FLQuant_get_dimnames(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_dimnames(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::List __result = test_FLQuant_get_dimnames(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_size
int test_FLQuant_get_size(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_size(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_size(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nquant
int test_FLQuant_get_nquant(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_nquant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nquant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nyear
int test_FLQuant_get_nyear(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_nyear(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nyear(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nunit
int test_FLQuant_get_nunit(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_nunit(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nunit(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nseason
int test_FLQuant_get_nseason(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_nseason(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nseason(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_narea
int test_FLQuant_get_narea(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_narea(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_narea(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_niter
int test_FLQuant_get_niter(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_niter(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_niter(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_data_element
int test_FLQuant_get_data_element(const FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_data_element(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        int __result = test_FLQuant_get_data_element(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_const_single_index_accessor
double test_FLQuant_get_const_single_index_accessor(const FLQuant flq, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_const_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        double __result = test_FLQuant_get_const_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_single_index_accessor
double test_FLQuant_get_single_index_accessor(FLQuant flq, int element);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        double __result = test_FLQuant_get_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_single_index_accessor
FLQuant test_FLQuant_set_single_index_accessor(FLQuant flq, int element, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_set_single_index_accessor(flq, element, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_const_get_accessor
double test_FLQuant_const_get_accessor(const FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant_const_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuant_const_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_accessor
double test_FLQuant_get_accessor(FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuant_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_accessor
FLQuant test_FLQuant_set_accessor(FLQuant flq, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_set_accessor(flq, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_data
FLQuant test_FLQuant_set_data(FLQuant flq, std::vector<double> data_in);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_data(SEXP flqSEXP, SEXP data_inSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type data_in(data_inSEXP );
        FLQuant __result = test_FLQuant_set_data(flq, data_in);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_dimnames
FLQuant test_FLQuant_set_dimnames(FLQuant flq, Rcpp::List new_dimnames);
RcppExport SEXP FLRcppAdolc_test_FLQuant_set_dimnames(SEXP flqSEXP, SEXP new_dimnamesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type new_dimnames(new_dimnamesSEXP );
        FLQuant __result = test_FLQuant_set_dimnames(flq, new_dimnames);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_match_dims
int test_FLQuant_FLQuant_match_dims(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLRcppAdolc_test_FLQuant_FLQuant_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        int __result = test_FLQuant_FLQuant_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_year_sum
FLQuant test_FLQuant_year_sum(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant_year_sum(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_year_sum(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_as_wrap
FLQuant7 test_FLQuant7_as_wrap(FLQuant7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_as_wrap(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant7 __result = test_FLQuant7_as_wrap(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_empty_wrap
FLQuant7 test_FLQuant7_empty_wrap();
RcppExport SEXP FLRcppAdolc_test_FLQuant7_empty_wrap() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        FLQuant7 __result = test_FLQuant7_empty_wrap();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_basic_constructor
void test_FLQuant7_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuant7_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuant7_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuant7_sexp_constructor
FLQuant7 test_FLQuant7_sexp_constructor(SEXP flq_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_sexp_constructor(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        FLQuant7 __result = test_FLQuant7_sexp_constructor(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_FLQuant_constructor
FLQuant7 test_FLQuant7_FLQuant_constructor(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_FLQuant_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_copy_constructor
FLQuant7 test_FLQuant7_copy_constructor(FLQuant7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_copy_constructor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant7 __result = test_FLQuant7_copy_constructor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_copy_constructor2
Rcpp::List test_FLQuant7_copy_constructor2(FLQuant7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_copy_constructor2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant7_copy_constructor2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_assignment_operator
FLQuant7 test_FLQuant7_assignment_operator(FLQuant7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_assignment_operator(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant7 __result = test_FLQuant7_assignment_operator(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_assignment_operator2
Rcpp::List test_FLQuant7_assignment_operator2(FLQuant7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_assignment_operator2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant7_assignment_operator2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_function_operator
FLQuant7 test_FLQuant7_function_operator(FLQuant7 flq7, FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_function_operator(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_function_operator(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_get_ndim7
int test_FLQuant7_get_ndim7(SEXP flq_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_get_ndim7(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        int __result = test_FLQuant7_get_ndim7(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_get_single_index_accessor
FLQuant test_FLQuant7_const_get_single_index_accessor(const FLQuant7 flq7, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_const_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuant __result = test_FLQuant7_const_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_get_single_index_accessor
FLQuant test_FLQuant7_get_single_index_accessor(FLQuant7 flq7, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuant __result = test_FLQuant7_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_set_single_index_accessor
FLQuant7 test_FLQuant7_set_single_index_accessor(FLQuant7 flq7, const int element, const FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_set_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_set_single_index_accessor(flq7, element, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_get_accessor
double test_FLQuant7_const_get_accessor(const FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_const_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_const_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_get_accessor
double test_FLQuant7_get_accessor(FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_set_accessor
FLQuant7 test_FLQuant7_set_accessor(FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLRcppAdolc_test_FLQuant7_set_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuant7 __result = test_FLQuant7_set_accessor(flq7, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_as_wrap
FLQuantAdolc7 test_FLQuantAdolc7_as_wrap(FLQuantAdolc7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_as_wrap(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_as_wrap(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_empty_wrap
FLQuantAdolc7 test_FLQuantAdolc7_empty_wrap();
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_empty_wrap() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        FLQuantAdolc7 __result = test_FLQuantAdolc7_empty_wrap();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_basic_constructor
void test_FLQuantAdolc7_basic_constructor();
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuantAdolc7_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuantAdolc7_sexp_constructor
FLQuantAdolc7 test_FLQuantAdolc7_sexp_constructor(SEXP flq_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_sexp_constructor(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_sexp_constructor(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_FLQuant_constructor
FLQuantAdolc7 test_FLQuantAdolc7_FLQuant_constructor(FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_FLQuant_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_copy_constructor
FLQuantAdolc7 test_FLQuantAdolc7_copy_constructor(FLQuantAdolc7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_copy_constructor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_copy_constructor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_copy_constructor2
Rcpp::List test_FLQuantAdolc7_copy_constructor2(FLQuantAdolc7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_copy_constructor2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAdolc7_copy_constructor2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_assignment_operator
FLQuantAdolc7 test_FLQuantAdolc7_assignment_operator(FLQuantAdolc7 flq7);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_assignment_operator(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_assignment_operator(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_assignment_operator2
Rcpp::List test_FLQuantAdolc7_assignment_operator2(FLQuantAdolc7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_assignment_operator2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAdolc7_assignment_operator2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_function_operator
FLQuantAdolc7 test_FLQuantAdolc7_function_operator(FLQuantAdolc7 flq7, FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_function_operator(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_function_operator(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_get_ndim7
int test_FLQuantAdolc7_get_ndim7(SEXP flq_sexp1);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_get_ndim7(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        int __result = test_FLQuantAdolc7_get_ndim7(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_const_get_single_index_accessor
FLQuantAdolc test_FLQuantAdolc7_const_get_single_index_accessor(const FLQuantAdolc7 flq7, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_const_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc7_const_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_get_single_index_accessor
FLQuantAdolc test_FLQuantAdolc7_get_single_index_accessor(FLQuantAdolc7 flq7, const int element);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuantAdolc __result = test_FLQuantAdolc7_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_set_single_index_accessor
FLQuantAdolc7 test_FLQuantAdolc7_set_single_index_accessor(FLQuantAdolc7 flq7, const int element, const FLQuantAdolc flq);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_set_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< const FLQuantAdolc >::type flq(flqSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_set_single_index_accessor(flq7, element, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_const_get_accessor
double test_FLQuantAdolc7_const_get_accessor(const FLQuantAdolc7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_const_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc7_const_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_get_accessor
double test_FLQuantAdolc7_get_accessor(FLQuantAdolc7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuantAdolc7_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAdolc7_set_accessor
FLQuantAdolc7 test_FLQuantAdolc7_set_accessor(FLQuantAdolc7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLRcppAdolc_test_FLQuantAdolc7_set_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAdolc7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuantAdolc7 __result = test_FLQuantAdolc7_set_accessor(flq7, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQ_in_FLS
FLQuant test_FLQ_in_FLS(FLQuant flq);
RcppExport SEXP FLRcppAdolc_test_FLQ_in_FLS(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQ_in_FLS(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_sexp_constructor
FLQuant test_FLStock_sexp_constructor(SEXP fls_sexp);
RcppExport SEXP FLRcppAdolc_test_FLStock_sexp_constructor(SEXP fls_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type fls_sexp(fls_sexpSEXP );
        FLQuant __result = test_FLStock_sexp_constructor(fls_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_wrap
FLStock test_FLStock_wrap(SEXP fls_sexp);
RcppExport SEXP FLRcppAdolc_test_FLStock_wrap(SEXP fls_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type fls_sexp(fls_sexpSEXP );
        FLStock __result = test_FLStock_wrap(fls_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_as
FLQuant test_FLStock_as(FLStock fls);
RcppExport SEXP FLRcppAdolc_test_FLStock_as(SEXP flsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls(flsSEXP );
        FLQuant __result = test_FLStock_as(fls);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_as_wrap
FLStock test_FLStock_as_wrap(FLStock fls);
RcppExport SEXP FLRcppAdolc_test_FLStock_as_wrap(SEXP flsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls(flsSEXP );
        FLStock __result = test_FLStock_as_wrap(fls);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_copy_constructor
Rcpp::List test_FLStock_copy_constructor(FLStock fls1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLStock_copy_constructor(SEXP fls1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls1(fls1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLStock_copy_constructor(fls1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_assignment_operator
Rcpp::List test_FLStock_assignment_operator(FLStock fls1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_FLStock_assignment_operator(SEXP fls1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls1(fls1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLStock_assignment_operator(fls1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_sexp_constructor
fwdBiol test_fwdBiol_sexp_constructor(SEXP flb_sexp);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_sexp_constructor(SEXP flb_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        fwdBiol __result = test_fwdBiol_sexp_constructor(flb_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_sexp_constructor
fwdBiolAdolc test_fwdBiolAdolc_sexp_constructor(SEXP flb_sexp);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_sexp_constructor(SEXP flb_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_sexp_constructor(flb_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_as_wrap
fwdBiol test_fwdBiol_as_wrap(fwdBiol fwdb);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_as_wrap(SEXP fwdbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb(fwdbSEXP );
        fwdBiol __result = test_fwdBiol_as_wrap(fwdb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_as_wrap
fwdBiolAdolc test_fwdBiolAdolc_as_wrap(fwdBiolAdolc fwdb);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_as_wrap(SEXP fwdbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb(fwdbSEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_as_wrap(fwdb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_copy_constructor
fwdBiol test_fwdBiol_copy_constructor(fwdBiol fwdb1);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_copy_constructor(SEXP fwdb1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP );
        fwdBiol __result = test_fwdBiol_copy_constructor(fwdb1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_copy_constructor
fwdBiolAdolc test_fwdBiolAdolc_copy_constructor(fwdBiolAdolc fwdb1);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_copy_constructor(SEXP fwdb1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb1(fwdb1SEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_copy_constructor(fwdb1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_copy_constructor2
Rcpp::List test_fwdBiol_copy_constructor2(fwdBiol fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_copy_constructor2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_fwdBiol_copy_constructor2(fwdb1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_copy_constructor2
Rcpp::List test_fwdBiolAdolc_copy_constructor2(fwdBiolAdolc fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_copy_constructor2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb1(fwdb1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_fwdBiolAdolc_copy_constructor2(fwdb1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_assignment_operator
fwdBiol test_fwdBiol_assignment_operator(fwdBiol fwdb1);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_assignment_operator(SEXP fwdb1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP );
        fwdBiol __result = test_fwdBiol_assignment_operator(fwdb1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_assignment_operator
fwdBiolAdolc test_fwdBiolAdolc_assignment_operator(fwdBiolAdolc fwdb1);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_assignment_operator(SEXP fwdb1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb1(fwdb1SEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_assignment_operator(fwdb1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_assignment_operator2
Rcpp::List test_fwdBiol_assignment_operator2(fwdBiol fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_assignment_operator2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_fwdBiol_assignment_operator2(fwdb1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_assignment_operator2
Rcpp::List test_fwdBiolAdolc_assignment_operator2(fwdBiolAdolc fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_assignment_operator2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb1(fwdb1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_fwdBiolAdolc_assignment_operator2(fwdb1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_get_accessors
Rcpp::NumericVector test_fwdBiol_get_accessors(fwdBiol fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_fwdBiol_get_accessors(fwdb, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_get_accessors
Rcpp::NumericVector test_fwdBiolAdolc_get_accessors(fwdBiolAdolc fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::NumericVector __result = test_fwdBiolAdolc_get_accessors(fwdb, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiol_set_accessors
fwdBiol test_fwdBiol_set_accessors(fwdBiol fwdb, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP FLRcppAdolc_test_fwdBiol_set_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiol >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP );
        fwdBiol __result = test_fwdBiol_set_accessors(fwdb, quant, year, unit, season, area, iter, values);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_fwdBiolAdolc_set_accessors
fwdBiolAdolc test_fwdBiolAdolc_set_accessors(fwdBiolAdolc fwdb, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP FLRcppAdolc_test_fwdBiolAdolc_set_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< fwdBiolAdolc >::type fwdb(fwdbSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP );
        fwdBiolAdolc __result = test_fwdBiolAdolc_set_accessors(fwdb, quant, year, unit, season, area, iter, values);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
